<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL多表联查练习</title>
      <link href="/MYSQL%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E7%BB%83%E4%B9%A0/"/>
      <url>/MYSQL%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备数据"><a href="#一、准备数据" class="headerlink" title="一、准备数据"></a>一、准备数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#创建表及插入记录</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> class <span class="token punctuation">(</span>  cid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  caption <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> class <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'三年二班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'三年三班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'一年二班'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'二年九班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> course<span class="token punctuation">(</span>  cid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  teacher_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> fk_course_teacher <span class="token punctuation">(</span>teacher_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_course_teacher <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>teacher_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> teacher <span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> course <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'生物'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'物理'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'体育'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'美术'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> score <span class="token punctuation">(</span>  sid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  student_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  course_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  num <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> fk_score_student <span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> fk_score_course <span class="token punctuation">(</span>course_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_score_course <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> course <span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_score_student <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>student_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> student<span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> score <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>  sid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  class_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> fk_class <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> fk_class <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>class_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> class <span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'理解'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'钢蛋'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张四'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'铁锤'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'如花'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'刘三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'刘一'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'刘二'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'刘四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> teacher<span class="token punctuation">(</span>  tid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  tname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> teacher <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张磊老师'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李平老师'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'刘海燕老师'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'朱云海老师'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'李杰老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二、题目"><a href="#二、题目" class="headerlink" title="二、题目"></a>二、题目</h2><pre class=" language-json"><code class="language-json"><span class="token number">1</span>、查询所有的课程的名称以及对应的任课老师姓名<span class="token number">2</span>、查询学生表中男女生各有多少人<span class="token number">3</span>、查询物理成绩等于<span class="token number">100</span>的学生的姓名<span class="token number">4</span>、查询平均成绩大于八十分的同学的姓名和平均成绩<span class="token number">5</span>、查询所有学生的学号，姓名，选课数，总成绩<span class="token number">6</span>、 查询姓李老师的个数<span class="token number">7</span>、 查询没有报李平老师课的学生姓名<span class="token number">8</span>、 查询物理课程比生物课程高的学生的学号<span class="token number">9</span>、 查询没有同时选修物理课程和体育课程的学生姓名<span class="token number">10</span>、查询挂科超过两门(包括两门<span class="token punctuation">)</span>的学生姓名和班级、查询选修了所有课程的学生姓名<span class="token number">12</span>、查询李平老师教的课程的所有成绩记录<span class="token number">13</span>、查询全部学生都选修了的课程号和课程名<span class="token number">14</span>、查询每门课程被选修的次数<span class="token number">15</span>、查询之选修了一门课程的学生姓名和学号<span class="token number">16</span>、查询所有学生考出的成绩并按从高到低排序（成绩去重）<span class="token number">17</span>、查询平均成绩大于<span class="token number">85</span>的学生姓名和平均成绩<span class="token number">18</span>、查询生物成绩不及格的学生姓名和对应生物分数<span class="token number">19</span>、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程<span class="token punctuation">)</span>平均成绩最高的学生姓名<span class="token number">20</span>、查询每门课程成绩最好的前两名学生姓名<span class="token number">21</span>、查询不同课程但成绩相同的学号，课程号，成绩<span class="token number">22</span>、查询没学过“叶平”老师课程的学生姓名以及选修的课程名称；<span class="token number">23</span>、查询所有选修了学号为<span class="token number">1</span>的同学选修过的一门或者多门课程的同学学号和姓名；<span class="token number">24</span>、任课最多的老师中学生单科成绩最高的学生姓名</code></pre><h2 id="三、答案"><a href="#三、答案" class="headerlink" title="三、答案"></a>三、答案</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#1、查询所有的课程的名称以及对应的任课老师姓名</span><span class="token keyword">SELECT</span>    course<span class="token punctuation">.</span>cname<span class="token punctuation">,</span>    teacher<span class="token punctuation">.</span>tname<span class="token keyword">FROM</span>    course<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> teacher <span class="token keyword">ON</span> course<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> teacher<span class="token punctuation">.</span>tid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#2、查询学生表中男女生各有多少人</span><span class="token keyword">SELECT</span>    gender 性别<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 人数<span class="token keyword">FROM</span>    student<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    gender<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#3、查询物理成绩等于100的学生的姓名</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> course <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>cid        <span class="token keyword">WHERE</span>            course<span class="token punctuation">.</span>cname <span class="token operator">=</span> <span class="token string">'物理'</span>        <span class="token operator">AND</span> score<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">100</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#4、查询平均成绩大于八十分的同学的姓名和平均成绩</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>    t1<span class="token punctuation">.</span>avg_num<span class="token keyword">FROM</span>    student<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        student_id<span class="token punctuation">,</span>        <span class="token function">avg</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_num    <span class="token keyword">FROM</span>        score    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        student_id    <span class="token keyword">HAVING</span>        <span class="token function">avg</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> t1 <span class="token keyword">ON</span> student<span class="token punctuation">.</span>sid <span class="token operator">=</span> t1<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#5、查询所有学生的学号，姓名，选课数，总成绩(注意：对于那些没有选修任何课程的学生也算在内)</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>    student<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>    t1<span class="token punctuation">.</span>course_num<span class="token punctuation">,</span>    t1<span class="token punctuation">.</span>total_num<span class="token keyword">FROM</span>    student<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        student_id<span class="token punctuation">,</span>        <span class="token function">COUNT</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> course_num<span class="token punctuation">,</span>        <span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> total_num    <span class="token keyword">FROM</span>        score    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        student_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> t1 <span class="token keyword">ON</span> student<span class="token punctuation">.</span>sid <span class="token operator">=</span> t1<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#6、 查询姓李老师的个数</span><span class="token keyword">SELECT</span>    <span class="token function">count</span><span class="token punctuation">(</span>tid<span class="token punctuation">)</span><span class="token keyword">FROM</span>    teacher<span class="token keyword">WHERE</span>    tname <span class="token operator">LIKE</span> <span class="token string">'李%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#7、 查询没有报李平老师课的学生姓名(找出报名李平老师课程的学生，然后取反就可以)</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">WHERE</span>            course_id <span class="token operator">IN</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span>                    course<span class="token punctuation">.</span>cid                <span class="token keyword">FROM</span>                    course                <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> teacher <span class="token keyword">ON</span> course<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> teacher<span class="token punctuation">.</span>tid                <span class="token keyword">WHERE</span>                    teacher<span class="token punctuation">.</span>tname <span class="token operator">=</span> <span class="token string">'李平老师'</span>            <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#8、 查询物理课程比生物课程高的学生的学号(分别得到物理成绩表与生物成绩表，然后连表即可)</span><span class="token keyword">SELECT</span>    t1<span class="token punctuation">.</span>student_id<span class="token keyword">FROM</span>    <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id<span class="token punctuation">,</span>            num        <span class="token keyword">FROM</span>            score        <span class="token keyword">WHERE</span>            course_id <span class="token operator">=</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span>                    cid                <span class="token keyword">FROM</span>                    course                <span class="token keyword">WHERE</span>                    cname <span class="token operator">=</span> <span class="token string">'物理'</span>            <span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token keyword">AS</span> t1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        student_id<span class="token punctuation">,</span>        num    <span class="token keyword">FROM</span>        score    <span class="token keyword">WHERE</span>        course_id <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span>                cid            <span class="token keyword">FROM</span>                course            <span class="token keyword">WHERE</span>                cname <span class="token operator">=</span> <span class="token string">'生物'</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>student_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>student_id<span class="token keyword">WHERE</span>    t1<span class="token punctuation">.</span>num <span class="token operator">></span> t2<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#9、 查询没有同时选修物理课程和体育课程的学生姓名(没有同时选修指的是选修了一门的，思路是得到物理+体育课程的学生信息表，然后基于学生分组，统计count(课程)=1)</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">WHERE</span>            course_id <span class="token operator">IN</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span>                    cid                <span class="token keyword">FROM</span>                    course                <span class="token keyword">WHERE</span>                    cname <span class="token operator">=</span> <span class="token string">'物理'</span>                <span class="token operator">OR</span> cname <span class="token operator">=</span> <span class="token string">'体育'</span>            <span class="token punctuation">)</span>        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            student_id        <span class="token keyword">HAVING</span>            <span class="token function">COUNT</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#10、查询挂科超过两门(包括两门)的学生姓名和班级(求出&lt;60的表，然后对学生进行分组，统计课程数目>=2)</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>    class<span class="token punctuation">.</span>caption<span class="token keyword">FROM</span>    student<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        student_id    <span class="token keyword">FROM</span>        score    <span class="token keyword">WHERE</span>        num <span class="token operator">&lt;</span> <span class="token number">60</span>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        student_id    <span class="token keyword">HAVING</span>        <span class="token function">count</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> t1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> class <span class="token keyword">ON</span> student<span class="token punctuation">.</span>sid <span class="token operator">=</span> t1<span class="token punctuation">.</span>student_id<span class="token operator">AND</span> student<span class="token punctuation">.</span>class_id <span class="token operator">=</span> class<span class="token punctuation">.</span>cid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#11、查询选修了所有课程的学生姓名(先从course表统计课程的总数，然后基于score表按照student_id分组，统计课程数据等于课程总数即可)</span><span class="token keyword">SELECT</span>    student<span class="token punctuation">.</span>sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            student_id        <span class="token keyword">HAVING</span>            <span class="token function">COUNT</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">FROM</span> course<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#12、查询李平老师教的课程的所有成绩记录</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    score<span class="token keyword">WHERE</span>    course_id <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            cid        <span class="token keyword">FROM</span>            course        <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> teacher <span class="token keyword">ON</span> course<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> teacher<span class="token punctuation">.</span>tid        <span class="token keyword">WHERE</span>            teacher<span class="token punctuation">.</span>tname <span class="token operator">=</span> <span class="token string">'李平老师'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#13、查询全部学生都选修了的课程号和课程名(取所有学生数，然后基于score表的课程分组，找出count(student_id)等于学生数即可)</span><span class="token keyword">SELECT</span>    cid<span class="token punctuation">,</span>    cname<span class="token keyword">FROM</span>    course<span class="token keyword">WHERE</span>    cid <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            course_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            course_id        <span class="token keyword">HAVING</span>            <span class="token function">COUNT</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span>                    <span class="token function">COUNT</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>                <span class="token keyword">FROM</span>                    student            <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#14、查询每门课程被选修的次数</span><span class="token keyword">SELECT</span>    course_id<span class="token punctuation">,</span>    <span class="token function">COUNT</span><span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token keyword">FROM</span>    score<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#15、查询之选修了一门课程的学生姓名和学号</span><span class="token keyword">SELECT</span>    sid<span class="token punctuation">,</span>    sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            student_id        <span class="token keyword">HAVING</span>            <span class="token function">COUNT</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#16、查询所有学生考出的成绩并按从高到低排序（成绩去重）</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>    num<span class="token keyword">FROM</span>    score<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    num <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#17、查询平均成绩大于85的学生姓名和平均成绩</span><span class="token keyword">SELECT</span>    sname<span class="token punctuation">,</span>    t1<span class="token punctuation">.</span>avg_num<span class="token keyword">FROM</span>    student<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        student_id<span class="token punctuation">,</span>        <span class="token function">avg</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> avg_num    <span class="token keyword">FROM</span>        score    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        student_id    <span class="token keyword">HAVING</span>        <span class="token function">AVG</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">85</span><span class="token punctuation">)</span> t1 <span class="token keyword">ON</span> student<span class="token punctuation">.</span>sid <span class="token operator">=</span> t1<span class="token punctuation">.</span>student_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#18、查询生物成绩不及格的学生姓名和对应生物分数</span><span class="token keyword">SELECT</span>    sname 姓名<span class="token punctuation">,</span>    num 生物成绩<span class="token keyword">FROM</span>    score<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> course <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> course<span class="token punctuation">.</span>cid<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> student <span class="token keyword">ON</span> score<span class="token punctuation">.</span>student_id <span class="token operator">=</span> student<span class="token punctuation">.</span>sid<span class="token keyword">WHERE</span>    course<span class="token punctuation">.</span>cname <span class="token operator">=</span> <span class="token string">'生物'</span><span class="token operator">AND</span> score<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#19、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程)平均成绩最高的学生姓名</span><span class="token keyword">SELECT</span>    sname<span class="token keyword">FROM</span>    student<span class="token keyword">WHERE</span>    sid <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            student_id        <span class="token keyword">FROM</span>            score        <span class="token keyword">WHERE</span>            course_id <span class="token operator">IN</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span>                    course<span class="token punctuation">.</span>cid                <span class="token keyword">FROM</span>                    course                <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> teacher <span class="token keyword">ON</span> course<span class="token punctuation">.</span>teacher_id <span class="token operator">=</span> teacher<span class="token punctuation">.</span>tid                <span class="token keyword">WHERE</span>                    teacher<span class="token punctuation">.</span>tname <span class="token operator">=</span> <span class="token string">'李平老师'</span>            <span class="token punctuation">)</span>        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            student_id        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>            <span class="token function">AVG</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">DESC</span>        <span class="token keyword">LIMIT</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#20、查询每门课程成绩最好的前两名学生姓名</span><span class="token comment" spellcheck="true">#查看每门课程按照分数排序的信息，为下列查找正确与否提供依据</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    score<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">,</span>    num <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#表1：求出每门课程的课程course_id,与最高分数first_num</span><span class="token keyword">SELECT</span>    course_id<span class="token punctuation">,</span>    <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num<span class="token keyword">FROM</span>    score<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#表2：去掉最高分，再按照课程分组，取得的最高分，就是第二高的分数second_num</span><span class="token keyword">SELECT</span>    score<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>    <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> second_num<span class="token keyword">FROM</span>    score<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        course_id<span class="token punctuation">,</span>        <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num    <span class="token keyword">FROM</span>        score    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        course_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> t <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t<span class="token punctuation">.</span>course_id<span class="token keyword">WHERE</span>    score<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>first_num<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#将表1和表2联合到一起，得到一张表t3，包含课程course_id与该们课程的first_num与second_num</span><span class="token keyword">SELECT</span>    t1<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>    t1<span class="token punctuation">.</span>first_num<span class="token punctuation">,</span>    t2<span class="token punctuation">.</span>second_num<span class="token keyword">FROM</span>    <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            course_id<span class="token punctuation">,</span>            <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num        <span class="token keyword">FROM</span>            score        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            course_id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> t1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        score<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>        <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> second_num    <span class="token keyword">FROM</span>        score    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            course_id<span class="token punctuation">,</span>            <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num        <span class="token keyword">FROM</span>            score        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            course_id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> t <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t<span class="token punctuation">.</span>course_id    <span class="token keyword">WHERE</span>        score<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>first_num    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>        course_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>course_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查询前两名的学生（有可能出现并列第一或者并列第二的情况）</span><span class="token keyword">SELECT</span>    score<span class="token punctuation">.</span>student_id<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>first_num<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>second_num<span class="token keyword">FROM</span>    score<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        t1<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>        t1<span class="token punctuation">.</span>first_num<span class="token punctuation">,</span>        t2<span class="token punctuation">.</span>second_num    <span class="token keyword">FROM</span>        <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span>                course_id<span class="token punctuation">,</span>                <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num            <span class="token keyword">FROM</span>                score            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>                course_id        <span class="token punctuation">)</span> <span class="token keyword">AS</span> t1    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            score<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>            <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> second_num        <span class="token keyword">FROM</span>            score        <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span>                course_id<span class="token punctuation">,</span>                <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num            <span class="token keyword">FROM</span>                score            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>                course_id        <span class="token punctuation">)</span> <span class="token keyword">AS</span> t <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t<span class="token punctuation">.</span>course_id        <span class="token keyword">WHERE</span>            score<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>first_num        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            course_id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>course_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> t3 <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>course_id<span class="token keyword">WHERE</span>    score<span class="token punctuation">.</span>num <span class="token operator">>=</span> t3<span class="token punctuation">.</span>second_num<span class="token operator">AND</span> score<span class="token punctuation">.</span>num <span class="token operator">&lt;=</span> t3<span class="token punctuation">.</span>first_num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#排序后可以看的明显点</span><span class="token keyword">SELECT</span>    score<span class="token punctuation">.</span>student_id<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>first_num<span class="token punctuation">,</span>    t3<span class="token punctuation">.</span>second_num<span class="token keyword">FROM</span>    score<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>        t1<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>        t1<span class="token punctuation">.</span>first_num<span class="token punctuation">,</span>        t2<span class="token punctuation">.</span>second_num    <span class="token keyword">FROM</span>        <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span>                course_id<span class="token punctuation">,</span>                <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num            <span class="token keyword">FROM</span>                score            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>                course_id        <span class="token punctuation">)</span> <span class="token keyword">AS</span> t1    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            score<span class="token punctuation">.</span>course_id<span class="token punctuation">,</span>            <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> second_num        <span class="token keyword">FROM</span>            score        <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span>                course_id<span class="token punctuation">,</span>                <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> first_num            <span class="token keyword">FROM</span>                score            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>                course_id        <span class="token punctuation">)</span> <span class="token keyword">AS</span> t <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t<span class="token punctuation">.</span>course_id        <span class="token keyword">WHERE</span>            score<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>first_num        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>            course_id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>course_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> t3 <span class="token keyword">ON</span> score<span class="token punctuation">.</span>course_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>course_id<span class="token keyword">WHERE</span>    score<span class="token punctuation">.</span>num <span class="token operator">>=</span> t3<span class="token punctuation">.</span>second_num<span class="token operator">AND</span> score<span class="token punctuation">.</span>num <span class="token operator">&lt;=</span> t3<span class="token punctuation">.</span>first_num<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#可以用以下命令验证上述查询的正确性</span><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    score<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    course_id<span class="token punctuation">,</span>    num <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 21、查询不同课程但成绩相同的学号，课程号，成绩</span><span class="token comment" spellcheck="true">-- 22、查询没学过“叶平”老师课程的学生姓名以及选修的课程名称；</span><span class="token comment" spellcheck="true">-- 23、查询所有选修了学号为1的同学选修过的一门或者多门课程的同学学号和姓名；</span><span class="token comment" spellcheck="true">-- 24、任课最多的老师中学生单科成绩最高的学生姓名</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 多表联查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba架构实战</title>
      <link href="/Spring-Cloud-Alibaba%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
      <url>/Spring-Cloud-Alibaba%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Alibaba架构实战"><a href="#Spring-Cloud-Alibaba架构实战" class="headerlink" title="Spring Cloud Alibaba架构实战"></a>Spring Cloud Alibaba架构实战</h2><p>案例与方法出现，但是一直以来大部分都是Spring Cloud合并Dubbo的使用方案都不完善。直到Spring Cloud Alibaba的出现，才得以解决这种问题。</p><p>SpringCloud Alibaba是基于阿里巴巴公司的Spring Cloud所开发的一套微服务框架集，此处引用了SpringCloud Alibaba的生产实践的一种架构方案，此方案可以所有权Dubbo RPC服务通信的优势，也可使用Spring Cloud RESTful接口的通用性。</p><h3 id="1总体结构"><a href="#1总体结构" class="headerlink" title="1总体结构"></a>1总体结构</h3><p>系统架构图如下：</p><p><img src="http://www.pbteach.com/article/framework/spring_cloud_alibaba_pro1/1571732038130.png" alt="1571732038130"></p><p>组件说明：</p><p><strong>API网关</strong>：系统统一入口，屏蔽架构内部结构，统一安全拦截，采用Zuul实现。</p><p><strong>application-1</strong>：应用1，模拟应用，提供http接口服务。</p><p><strong>service-1</strong>：微服务1，模拟微服务，提供dubbo接口服务。</p><p><strong>service-2</strong>：微服务2，模拟微服务，提供dubbo接口服务。</p><p>调用流程：</p><p>所有访问系统的请求都要经过网关，网关转发Http请求至application-1，application-1使用dubbo调用service1完成自身业务，而后sevice1调用service2完成自身业务。</p><p>架构中应用与sevice的区别是什么？</p><ul><li>service提供了基础服务功能； application组装基础服务功能，提供给用户直接可用的业务。</li><li>service服务粒度小，功能基础，不易发生改变； application提供上游业务功能，紧贴业务需求，容易发生改变。</li><li>形成服务支撑应用程序的整体架构，增加多变的应用程序甚至不需要移动服务。</li></ul><h3 id="2工程结构说明"><a href="#2工程结构说明" class="headerlink" title="2工程结构说明"></a>2工程结构说明</h3><p>采用maven工程，结构如下：</p><pre><code>nacos-micro-service   整体父工程├─api-gateway         API网关，端口：56010├─application-1          应用1，端口：56020├─service-1             服务1父工程│  ├─service-1-api      服务1API│  └─service-1-server 服务1实现，端口：56030    └─service-2             服务2父工程   ├─service-2-api      服务2API   └─service-2-server 服务2实现，端口：56040</code></pre><h3 id="3创建父工程"><a href="#3创建父工程" class="headerlink" title="3创建父工程"></a>3创建父工程</h3><p>创建<code>artifactId</code>所谓<code>nacos-micro-service</code>的Maven工程，此父工程继承nacos-discovery父工程，间接指定了Spring Boot，Spring Cloud以及Spring-Cloud-Alibaba的依赖版本。</p><pre><code>    &lt;parent&gt;        &lt;artifactId&gt;nacos-discovery&lt;/artifactId&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;nacos-micro-service&lt;/artifactId&gt;    &lt;packaging&gt;pom&lt;/packaging&gt;</code></pre><p>nacos-discovery的pom.xml如下：</p><pre><code>&lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;&lt;artifactId&gt;nacos-discovery&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;pom&lt;/packaging&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;Greenwich.RELEASE&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;            &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><h3 id="4实现应用1"><a href="#4实现应用1" class="headerlink" title="4实现应用1"></a>4实现应用1</h3><p>application1属于应用层，提供http接口服务。</p><p>（1）初始化<code>application-1</code>Maven工程</p><pre><code>&lt;artifactId&gt;application-1&lt;/artifactId&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p><strong>（2）实现application-1功能</strong></p><pre><code>package com.pbteach.microservice.application1.controller;@RestControllerpublic class Application1Controller {    @GetMapping("/service")    public String service(){       return "test" ;    }}</code></pre><p><strong>（3）application1配置</strong></p><p>纯粹的dubbo服务消费者，配置看起来更简单。</p><p>定义bootstrap.yml</p><pre><code>server:  port: 56020 #启动端口 命令行注入  servlet:    context-path: /application1spring:  application:    name: application1  main:    allow-bean-definition-overriding: true # Spring Boot 2.1 需要设定  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4        cluster-name: DEFAULT      config:        server-addr: 127.0.0.1:8848 # 配置中心地址        file-extension: yaml        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4 # 开发环境        group: NACOS_MICROSERVICE_GROUP # xx业务组</code></pre><p><strong>（4）application1启动</strong></p><pre><code>@SpringBootApplication@EnableDiscoveryClientpublic class Application1Bootstrap {    public static void main(String[] args) {        SpringApplication.run(Application1Bootstrap.class,args);    }}</code></pre><p>当<code>Service1Bootstrap</code>启动后，应用<code>application1</code>将出现在Nacos控制台界面。</p><h3 id="5实现Service1"><a href="#5实现Service1" class="headerlink" title="5实现Service1"></a>5实现Service1</h3><p>5.1定义父工程</p><p>定义service1父工程，pom.xml如下：</p><pre><code>&lt;parent&gt;    &lt;artifactId&gt;nacos-micro-service&lt;/artifactId&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;Service1&lt;/artifactId&gt;</code></pre><p>5.2定义service-1-api</p><p>为了方便其他服务调用dubbo服务，专门定义api工程，此工程将作为jar被其他工程依赖。</p><p>定义service-1-api工程，pom.xml如下：</p><pre><code>&lt;parent&gt;    &lt;artifactId&gt;Service1&lt;/artifactId&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;service-1-api&lt;/artifactId&gt;</code></pre><p>定义服务接口：</p><pre><code>package com.pbteach.microservice.service1.api;public interface ConsumerService {    public String service();}</code></pre><p>5.3实现service-1-server</p><p><strong>（1）初始化service-1-serverMaven工程</strong></p><p>与服务提供方Maven工程类似，需添加相关Maven依赖：</p><pre><code>    &lt;parent&gt;        &lt;artifactId&gt;Service1&lt;/artifactId&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;service-1-server&lt;/artifactId&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;artifactId&gt;service-1-api&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p><strong>（2）实现Dubbo服务</strong></p><pre><code>package com.pbteach.microservice.service1.service;@org.apache.dubbo.config.annotation.Servicepublic class ConsumerServiceImpl implements ConsumerService {    @Override    public String service() {        return "Consumer invoke " ;    }}</code></pre><p>注意：使用@ org.apache.dubbo.config.annotation.Service标记dubbo服务</p><p><strong>（3）配置Dubbo服务</strong></p><p>Service2作为Dubbo服务消费方配置与服务提供方类似，请注意，service1除了是消费方，同时还是服务提供方：</p><pre><code>server:  port: ${port:56030} #启动端口 命令行注入spring:  application:    name: service1  main:    allow-bean-definition-overriding: true # Spring Boot 2.1 需要设定  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4        cluster-name: DEFAULT      config:        server-addr: 127.0.0.1:8848 # 配置中心地址        file-extension: yaml        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4 # 开发环境        group: NACOS_MICROSERVICE_GROUP # xx业务组dubbo:  scan:    # dubbo 服务扫描基准包    base-packages: com.pbteach.microservice  protocol:    # dubbo 协议    name: dubbo    # dubbo 协议端口    port: ${dubbo_port:20881}  registry:    address: nacos://127.0.0.1:8848  application:    qos-enable: false #dubbo运维服务是否开启  consumer:    check: false  #启动时就否检查依赖的服务</code></pre><p>以上YAML内容，dubbo开头的为dubbo服务的配置：</p><ul><li><code>dubbo.scan.base-packages</code> ：指定Dubbo服务实现类的扫描基准包，将@ org.apache.dubbo.config.annotation.Service注解标注的服务暴露为dubbo服务。</li><li><code>dubbo.protocol</code>：Dubbo服务暴露的协议配置，其中子属性<code>name</code>为协议名称，<code>port</code>为dubbo协议端口</li></ul><p>可以指定多协议，如：dubbo.protocol.rmi.port = 1099</p><ul><li><code>dubbo.registry</code>：Dubbo服务注册中心配置，其中子属性<code>address</code>的值“ nacos：//127.0.0.1：8848”，说明dubbo服务注册到nacos</li></ul><p>相当于原生dubbo的xml配置中的 <code>&lt;dubbo:registry address="10.20.153.10:9090" /&gt;</code></p><p>上半部分为SpringCloud的相关配置：</p><ul><li><code>spring.application.name</code> ：Spring应用名称，用于Spring Cloud服务注册和发现。</li></ul><blockquote><p>该值在Dubbo Spring Cloud加持下被视作<code>dubbo.application.name</code>，因此，无需再显示地配置<code>dubbo.application.name</code></p></blockquote><ul><li><code>spring.cloud.nacos.discovery</code> ：Nacos服务发现与注册配置，其中子属性server-addr指定Nacos服务器主机和端口</li><li><code>spring.cloud.nacos.config</code> ：Nacos配置中心配置，其中子属性server-addr指定Nacos服务器主机和端口。</li></ul><p><strong>（4）启动服务消费方应用</strong></p><pre><code>@SpringBootApplication@EnableDiscoveryClientpublic class Service1Bootstrap {    public static void main(String[] args) {        SpringApplication.run(Service1Bootstrap.class, args);    }}</code></pre><p>当<code>Service1Bootstrap</code>启动后，应用<code>service1</code>将出现在Nacos控制台界面。</p><p>启动成功，观察nacos服务列表</p><p><img src="http://www.pbteach.com/article/framework/spring_cloud_alibaba_pro1/1572439366107.png" alt="1572439366107"></p><h3 id="6实现application1调用Service1"><a href="#6实现application1调用Service1" class="headerlink" title="6实现application1调用Service1"></a>6实现application1调用Service1</h3><p>现在service1已暴露dubbo服务并注册到nacos中，下边实现application1调用service1</p><p>6.1引用service1</p><p>下边在application1中引用service1</p><p>在pom.xml中日期service-1-api的依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;artifactId&gt;service-1-api&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>♡spring-cloud-starter-dubbo依赖，它会根据接口生成代理对象</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>6.2实现远程调用</p><pre><code>@RestControllerpublic class Application1Controller {    @org.apache.dubbo.config.annotation.Reference    private ConsumerService consumerService;    @GetMapping("/service")    public String service(){        return "test" + consumerService.service();    }}</code></pre><p>注意：注意：这里的<code>@Reference</code>注解是<code>org.apache.dubbo.config.annotation.Reference</code></p><p>测试：</p><p>请求：<a href="http://localhost:56020/application1/service" target="_blank" rel="noopener">http：// localhost：56020 / application1 / service</a></p><p>ConsumerService正常生成代理对象，service1被调用。</p><h3 id="7实现Service2"><a href="#7实现Service2" class="headerlink" title="7实现Service2"></a>7实现Service2</h3><p>如上面的设计所示，Service2需要暴露dubbo接口以供service1消费，若想在Spring cloud Alibaba中集成并使用dubbo。</p><p>7.1定义父工程</p><p>定义service2父工程，pom.xml如下：</p><pre><code>&lt;parent&gt;    &lt;artifactId&gt;nacos-micro-service&lt;/artifactId&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;Service2&lt;/artifactId&gt;</code></pre><p>7.2定义service-2-api</p><p>定义service-2-api工程，pom.xml如下：</p><pre><code>&lt;parent&gt;    &lt;artifactId&gt;Service2&lt;/artifactId&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;service-2-api&lt;/artifactId&gt;</code></pre><p>并定义服务接口，Dubbo服务接口是服务提供方与消费方的远程通讯契约，通常由普通的Java接口（接口）来声明，如<code>ProviderService</code>接口：</p><pre><code>package com.pbteach.microservice.service2.api;public interface ProviderService {    String service();}</code></pre><p>7.3实现service-2-server</p><p><strong>（1）初始化service-2-serverMaven工程</strong></p><p>首先，创建<code>artifactId</code>所谓<code>service-2-server</code>的Maven工程，并在其<code>pom.xml</code>文件中增添Dubbo Spring Cloud必要的依赖：</p><pre><code>     &lt;parent&gt;        &lt;artifactId&gt;Service2&lt;/artifactId&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;service-2-server&lt;/artifactId&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;artifactId&gt;service-2-api&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-dubbo&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>以上依赖工件说明如下：</p><ul><li><code>service-2-api</code>：提供<code>ProviderService</code>接口的工件</li><li><code>spring-boot-starter-web</code>：Spring Boot启动程序<code>artifact</code>，，间接约会<code>spring-boot</code>神器</li><li><code>spring-cloud-starter-dubbo</code>：Dubbo Spring Cloud Starter <code>artifact</code>，间接约会<code>dubbo-spring-boot-starter</code>等工件</li><li><code>spring-cloud-starter-alibaba-nacos-discovery</code> ：Nacos Spring Cloud服务注册与发现 <code>artifact</code></li></ul><p><strong>（2）实现Dubbo服务</strong></p><p><code>ProviderService</code>作为暴露的Dubbo服务接口，服务提供方<code>service-2-server</code>需要将其实现：</p><pre><code>package com.pbteach.microservice.service2.service;@org.apache.dubbo.config.annotation.Servicepublic class ProviderServiceImpl implements ProviderService {    @Override    public String service() {        return "Provider invoke";    }}</code></pre><p>其中，<code>@org.apache.dubbo.config.annotation.Service</code>是Dubbo服务注解，仅声明该Java服务（本地）实现为Dubbo服务。因此，接下来需要将其配置Dubbo服务（远程）。</p><p><strong>（3）配置Dubbo服务</strong></p><p>在暴露的Dubbo服务方面，推荐开发人员外部化配置的方式，即指定Java服务实现类的扫描基准包。</p><blockquote><p>Dubbo Spring Cloud继承了Dubbo Spring Boot的外部化配置特性，也可以通过标注<code>@DubboComponentScan</code>来实现基准包扫描。</p></blockquote><p>同时，Dubbo远程服务需要暴露网络端口，并设置通讯协议，完整的YAML配置如下所示：</p><pre><code>server:  port: ${port:56040} #启动端口 命令行注入spring:  application:    name: service2  main:    allow-bean-definition-overriding: true # Spring Boot 2.1 需要设定  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4        cluster-name: DEFAULT      config:        server-addr: 127.0.0.1:8848 # 配置中心地址        file-extension: yaml        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4 # 开发环境        group: NACOS_MICROSERVICE_GROUP # xx业务组dubbo:  scan:    # dubbo 服务扫描基准包    base-packages: com.pbteach.microservice  protocol:    # dubbo 协议    name: dubbo    # dubbo 协议端口（ -1 表示自增端口，从 20880 开始）    port: ${dubbo_port:20891}  registry:    address: nacos://127.0.0.1:8848  application:    qos-enable: false  consumer:    check: false</code></pre><p><strong>（4）启动服务提供方应用</strong></p><p>Dubbo Spring Cloud引导类与普通Spring Cloud应用既有区别，如下所示：</p><pre><code>@SpringBootApplication@EnableDiscoveryClientpublic class Service2Bootstrap {    public static void main(String[] args) {        SpringApplication.run(Service2Bootstrap.class, args);    }}</code></pre><p>在<code>Service2Bootstrap</code>启动之前，请提前启动Nacos服务器。当<code>Service2Bootstrap</code>启动后，应用<code>service2</code>将出现在Nacos控制台界面。</p><h3 id="8实现service1调用service2"><a href="#8实现service1调用service2" class="headerlink" title="8实现service1调用service2"></a>8实现service1调用service2</h3><p>8.1引用service2</p><p>在service2中添加service1的依赖：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;    &lt;artifactId&gt;service-2-api&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>8.2实现远程调用</p><pre><code>@org.apache.dubbo.config.annotation.Servicepublic class ConsumerServiceImpl implements ConsumerService {    @Reference    ProviderService providerService;    public String service() {        return "Consumer invoke | "+providerService.service();    }}</code></pre><p>测试：</p><p>请求：<a href="http://localhost:56020/application1/service" target="_blank" rel="noopener">http：// localhost：56020 / application1 / service</a></p><p>application1调用service1，service1调用service2</p><h3 id="9实现api-gateway"><a href="#9实现api-gateway" class="headerlink" title="9实现api-gateway"></a>9实现api-gateway</h3><p>9.1 Zuul介绍</p><p>什么是网关？</p><p>原来的单体架构，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的Java进程了。客户端UI如何访问？他的后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们替换的理念，特别当前台是另外，N个小服务的调用也是一个不小的网络开销。</p><p><img src="http://www.pbteach.com/post/java_video/nacos-discovery/1571880838542.png" alt="1571880838542"></p><p>有了网关作为服务统一入口，就可以避免上述问题，不仅如此，服务网关是在微服务前边设置一道屏障，请求先到服务网关，网关路由请求进行过虑，校验，路由等处理。有了服务网关可以提高微服务的安全性，网关验证请求的合法性，请求不合法将被拦截，拒绝访问。</p><ul><li>提供统一服务入口，让微服务对前台透明</li><li>聚合后台的服务，节省流量，提升性能</li><li>提供安全，过滤，流控等API管理功能</li></ul><p>什么是Zuul？</p><p>Spring Cloud Zuul是整合Netflix公司的Zuul开源项目实现的微服务网关，它实现了请求路由，负载均衡，校准过虑等功能。</p><p>官方：<a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">https</a> : <a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">//github.com/Netflix/zuul</a></p><p>Zuul与Nginx如何配合使用？</p><p>Zuul与Nginx在实际项目中需要配合使用，如下图，Nginx的作用是反向代理，负载均衡，Zuul的作用是保障微服务的安全访问，拦截微服务请求，验证合法性和负载均衡。</p><p><img src="http://www.pbteach.com/post/java_video/nacos-discovery/1571881971066.png" alt="1571881971066"></p><p>9.2建造网关工程</p><p>初始化<code>api-gateway</code>Maven工程</p><pre><code>    &lt;parent&gt;        &lt;artifactId&gt;nacos-micro-service&lt;/artifactId&gt;        &lt;groupId&gt;com.pbteach.nacos&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;api-gateway&lt;/artifactId&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>9.3 api-gateway配置</p><pre><code>server:  port: 56010 #启动端口 命令行注入spring:  application:    name: api-gateway  main:    allow-bean-definition-overriding: true # Spring Boot 2.1 需要设定  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4        cluster-name: DEFAULT      config:        server-addr: 127.0.0.1:8848 # 配置中心地址        file-extension: yaml        namespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4 # 开发环境        group: NACOS_MICROSERVICE_GROUP # xx业务组</code></pre><p>网关的路由<strong>配置采用</strong> nacos远程配置，在nacos控制台<strong>开发环境</strong>中添加api-gateway.yaml配置集，配置组为TEST_GROUP，配置内容如下：</p><pre><code>zuul:  routes:    application1:      stripPrefix: false      path: /application1/**</code></pre><p>将请求为<code>/application1/</code>开头的请求路由至<code>application1</code>服务，保留请求网址中的<code>/application1/</code>。</p><p><img src="http://www.pbteach.com/post/java_video/nacos-discovery/1572442388728.png" alt="1572442388728"></p><p><strong>（4）api-gateway启动</strong></p><p>注意在启动类上使用@EnableZuulProxy注解标识此工程为Zuul网关，启动类代码如下：</p><pre><code>@SpringBootApplication@EnableDiscoveryClient@EnableZuulProxypublic class ApiGatewayBootstrap {    public static void main(String[] args) {        SpringApplication.run(ApiGatewayBootstrap.class, args);    }}</code></pre><p>当<code>Service1Bootstrap</code>启动后，应用<code>api-gateway</code>将出现在Nacos服务列表中。</p><p><img src="http://www.pbteach.com/post/java_video/nacos-discovery/1572442564557.png" alt="1572442564557"></p><p>测试：</p><p>通过网关（api-gateway）请求Application1应用，Application1的业务实现又过渡service1，service2，访问<a href="http://127.0.0.1:56010/application1/service" target="_blank" rel="noopener">http://127.0.0.1:56010/application1/service</a>，将得到如下结果：</p><p><img src="http://www.pbteach.com/post/java_video/nacos-discovery/1571828918606.png" alt="1571828918606"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB入门教程</title>
      <link href="/MongoDB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/MongoDB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/mongo.jpg" alt="1546407114827"></p><p> 官方网站 : <a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a></p><p> MongoDB 是 Nosql 系列数据库 ( 非关系型数据库 ) , 由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><p> 关系型数据库中的表都是存储一些结构化的数据，每条记录的字段的组成都一样，即使不是每条记录都需要所有的字段，但数据库会为每条数据分配所有的字段。而非关系型数据库以键值对(key-value)存储，它的结构不固定，每一条记录可以有不一样的键，每条记录可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。</p><p> 流行的NOSQL数据库 : MongoDB , Redis , memcache</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p> ①. 面向集合存储，易于存储对象类型的数据</p><p> ②. 模式自由</p><p> ③. 支持动态查询</p><p> ④. 支持完全索引，包含内部对象</p><p> ⑤. 支持复制和故障恢复</p><p> ⑥. 使用高效的二进制数据存储，包括大型对象（如视频等）</p><p> ⑦. 自动处理碎片，以支持云计算层次的扩展性</p><p> ⑧. 支持 Python，PHP，Ruby，Java，C，C#，Javascript，Perl 及 C++语言的驱动程序</p><p> ⑨. 文件存储格式为 BSON（一种 JSON 的扩展）</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><table><thead><tr><th align="left">SQL术语/概念</th><th align="left">MongoDB术语/概念</th><th align="left">解释/说明</th></tr></thead><tbody><tr><td align="left">database</td><td align="left">database</td><td align="left">数据库</td></tr><tr><td align="left">table</td><td align="left">collection</td><td align="left">数据库表/集合</td></tr><tr><td align="left">row</td><td align="left">document</td><td align="left">数据记录行/文档</td></tr><tr><td align="left">column</td><td align="left">field</td><td align="left">数据字段/域</td></tr><tr><td align="left">index</td><td align="left">index</td><td align="left">索引</td></tr><tr><td align="left">table joins</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">primary key</td><td align="left">primary key</td><td align="left">主键, MongoDB自动在每个集合中添加_id的主键</td></tr></tbody></table><h1 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h1><h3 id="windows平台"><a href="#windows平台" class="headerlink" title="windows平台"></a>windows平台</h3><p>安装环境 : Windows</p><p>安装版本 : 4.0.5</p><p>安装步骤 :</p><p> 双击 , 下一步 , 一直下一步就可以了;</p><p>安装 MongoDB服务</p><pre><code>mongod.exe --config "c:/develop/MongoDB/bin/mongod.cfg" --install</code></pre><p>启动MongoDB服务</p><pre><code>net start MongoDB</code></pre><p>关闭MongoDB服务</p><pre><code>net stop MongoDB</code></pre><p>配置环境变量</p><p> MONGO_HOME=c:/develop/MongoDB</p><p> 配置PATH</p><p>连接MongoDB</p><p> mongo.exe</p><p>移除MongoDB服务</p><pre><code>"C:\develop\mongoDB\bin\mongod.exe" --remove</code></pre><h3 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h3><p>安装环境 : Linux</p><p>安装版本 : 4.0.5</p><p>安装步骤 :</p><p> ①. 创建目录用于安装MongoDB : mkdir -p /usr/localhost/mongoDB</p><p> ②. 切换到mongoDB目录下 : cd /usr/localhost/mongoDB</p><p> ③. 下载MongoDB安装包 : wget <a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.9.tgz" target="_blank" rel="noopener">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.6.9.tgz</a></p><p> ④. 解压 : tar -zxvf mongodb-linux-x86_64-3.6.9.tgz</p><p> ⑤. 重命名解压后的目录 : mv mongodb-linux-x86_64-3.6.9 mongodb</p><p> ⑥. 进入mongodb 目录 : cd mongodb</p><p> ⑦. 创建两个目录, 分别用来存放数据文件和日志文件 : mkdir data logs</p><p> ⑧. 在bin目录下配置MongoDB的配置文件 mongod.conf</p><pre><code>#数据文件存放目录dbpath=/usr/local/mongoDB/mongodb/data#日志文件存放目录logpath =/usr/local/mongoDB/mongodb/logs/mongodb.log#端口port=27017#以守护线程的方式启用，即在后台运行fork=true#日志输出方式，使用追加的方式写日志logappend=true#PID File 的完整路径，如果没有设置，则没有PID文件pidfilepath=/usr/local/mongoDB/mongodb/mongo.pid#关闭http接口，默认关闭27018端口访问#nohttpinterface=true#开启认证#auth = truebind_ip=0.0.0.0</code></pre><p>启动 :</p><pre><code>cd binmongod -f mongod.conf</code></pre><h1 id="MongoDB数据库操作"><a href="#MongoDB数据库操作" class="headerlink" title="MongoDB数据库操作"></a>MongoDB数据库操作</h1><p>连接数据库 :</p><pre><code>mongo localhost:27017</code></pre><p>查看所有数据库 :</p><pre><code>show dbs;</code></pre><p>查看当前数据库:</p><pre><code>db;</code></pre><p>创建数据库 :</p><pre><code>use DATABASE_NAME</code></pre><p> 如果数据库不存在，则创建数据库，否则切换到指定数据库。</p><p>删除数据库 :</p><pre><code>use pbteach01;db.dropDatabase();</code></pre><h1 id="MongoDB集合操作"><a href="#MongoDB集合操作" class="headerlink" title="MongoDB集合操作"></a>MongoDB集合操作</h1><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><pre><code>db.createCollection(name, options) </code></pre><p> 参数说明 :</p><p> name: 新创建的集合名称</p><p> options: 可选参数, 指定有关内存大小及索引的选项</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546407114847.png" alt="1546407114847"></p><h3 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h3><pre><code>show collections;</code></pre><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><pre><code>db.collectionname.drop() ;</code></pre><p> 案例 :</p><p> db.pbteach01.drop() ; 删除pbteach01集合</p><h1 id="MongoDB文档操作"><a href="#MongoDB文档操作" class="headerlink" title="MongoDB文档操作"></a>MongoDB文档操作</h1><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><pre><code>db.COLLECTION_NAME.insert(document) ;</code></pre><p> 案例:</p><p> db.user.insert({“name”:“攀博网”,“age”:10,“address”:“北京”});</p><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>语法格式</p><pre><code>db.collection.update(           &lt;query&gt;,           &lt;update&gt;,           &lt;options&gt;)</code></pre><p> query : 查询条件，相当于sql语句的where</p><p> update：更新文档内容</p><p> options：选项 , 可选</p><p> upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</p><p> multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</p><p> writeConcern :可选，抛出异常的级别</p><p>替换文档</p><pre><code>db.student.update({"name":"攀博网"},{"name":"自学编程攀博网","age":10}) ;</code></pre><p>将符合条件 “name”:“攀博网”的第一个文档替换为{“name”:“自学编程攀博网”,“age”:10} ;</p><p>$set修改器</p><p>使用$set修改器指定要更新的key，key不存在则创建，存在则更新。</p><p>案例 :</p><p> 将符合条件 “name”:“攀博网”的所有文档更新name和age的值。</p><pre><code>db.student.update({"name":"攀博网"},{$set:{"name":"自学编程攀博网","age":10}},{multi:true}) ;</code></pre><p> multi：false表示更新第一个匹配的文档，true表示更新所有匹配的文档。</p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>构造数据</p><pre><code>db.user.insert({"name":"java10","age":10,"address":"bj"});db.user.insert({"name":"java11","age":11,"address":"bj"});db.user.insert({"name":"java12","age":12,"address":"bj"});db.user.insert({"name":"java13","age":13,"address":"bj"});</code></pre><p>语法格式</p><pre><code>db.collection.find(query, projection) ;</code></pre><p> query：查询条件，可不填</p><p> projection：投影查询key，可不填</p><p>查询全部</p><pre><code>db.student.find() ;</code></pre><p>条件查询</p><pre><code>db.student.find({"name":"攀博网"}) ;</code></pre><p>范围查询</p><p> 如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><table><thead><tr><th align="left">操作</th><th align="left">格式</th><th align="left">范例</th><th align="left">RDBMS中的类似语句</th></tr></thead><tbody><tr><td align="left">等于</td><td align="left"><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td align="left"><code>db.col.find({"by":"攀博网"}).pretty()</code></td><td align="left"><code>where by = '攀博网'</code></td></tr><tr><td align="left">小于</td><td align="left"><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td align="left"><code>db.col.find({"likes":{$lt:50}}).pretty()</code></td><td align="left"><code>where likes &lt; 50</code></td></tr><tr><td align="left">小于或等于</td><td align="left"><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td align="left"><code>db.col.find({"likes":{$lte:50}}).pretty()</code></td><td align="left"><code>where likes &lt;= 50</code></td></tr><tr><td align="left">大于</td><td align="left"><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td align="left"><code>db.col.find({"likes":{$gt:50}}).pretty()</code></td><td align="left"><code>where likes &gt; 50</code></td></tr><tr><td align="left">大于或等于</td><td align="left"><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td align="left"><code>db.col.find({"likes":{$gte:50}}).pretty()</code></td><td align="left"><code>where likes &gt;= 50</code></td></tr><tr><td align="left">不等于</td><td align="left"><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td align="left"><code>db.col.find({"likes":{$ne:50}}).pretty()</code></td><td align="left"><code>where likes != 50</code></td></tr></tbody></table><p> 案例 :</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546783636120.png" alt="1546783636120"></p><p>模糊查询</p><p> MongoDB查询条件可以使用正则表达式，从而实现模糊查询的功能。</p><p> MongoDB使用 $regex 操作符来设置匹配字符串的正则表达式，使用PCRE(Pert Compatible Regular Expression)作为正则表达式语言。</p><p> 语法 ：</p><pre><code>        {&lt;field&gt;:{regex:/pattern/,options:’&lt;options&gt;’}}        {&lt;field&gt;:{regex:’pattern’,options:’&lt;options&gt;’}}        {&lt;field&gt;:{$regex:/pattern/&lt;options&gt;}}    </code></pre><p> 案例 ：</p><p> name中包含java关键字的文档 :</p><pre><code>db.user.find({name:{$regex:/java/}})</code></pre><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546784330769.png" alt="1546784330769"></p><p> 忽略大小写 :</p><pre><code>db.user.find({name:{$regex:/java/i}})</code></pre><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546784380900.png" alt="1546784380900"></p><p> 以0结尾 :</p><pre><code> db.user.find({name:{$regex:/0$/}})</code></pre><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546784413682.png" alt="1546784413682"></p><p>投影查询</p><pre><code>db.student.find({"name":"攀博网"},{name:1,age:1,_id:0}) ;</code></pre><p> 案例:</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546783733908.png" alt="1546783733908"></p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546783769031.png" alt="1546783769031"></p><p>排序</p><p> 在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p><p> 语法 :</p><pre><code>db.user.find().sort({age:-1}) </code></pre><p> 案例 :</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546785720410.png" alt="1546785720410"></p><p>分页</p><p> 在mongoDB中可以使用limit()方法，配合skip() 方法来实现分页功能 ;</p><p> limit(5) : 代表每页返回的记录数 .</p><p> skip(5) : 代表跳过前面的多少条记录 .</p><p> 语法 :</p><pre><code>db.user.find().sort({age:-1}).limit(4).skip(5);</code></pre><p> 案例 :</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546786100340.png" alt="1546786100340"></p><p>聚合统计</p><p> 语法 :</p><p> db.user.count();</p><p> db.user.count({name:“java00”});</p><p> 案例 :</p><p> <img src="http://www.pbteach.com/post/java_distribut/mongodb_quickstart/1546786407220.png" alt="1546786407220"></p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p>语法格式</p><pre><code>    db.student.remove(&lt;query&gt;) ;    query：删除条件，相当于sql语句中的where    </code></pre><p>条件删除</p><pre><code>db.student.remove({"name":"攀博网})</code></pre><p>删除所有</p><pre><code>db.student.remove({}) ;</code></pre><h1 id="MongoDB-JAVA客户端"><a href="#MongoDB-JAVA客户端" class="headerlink" title="MongoDB JAVA客户端"></a>MongoDB JAVA客户端</h1><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mongodb&lt;/groupId&gt;        &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;        &lt;version&gt;3.4.3&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h3 id="插入文档-1"><a href="#插入文档-1" class="headerlink" title="插入文档"></a>插入文档</h3><pre><code>/** * 插入单个文档 */@Testpublic void testInsertCollection(){    MongoClient mongoClient = new MongoClient("127.0.0.1",27017);    MongoDatabase database = mongoClient.getDatabase("pbteach01");    database.createCollection("user");    MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");    Document doc = new Document();    doc.put("name", "Rose");    doc.put("age", 10);    doc.put("address", "北京");    userCollection.insertOne(doc);    mongoClient.close();}/** * 批量插入文档 */@Testpublic void testInsertCollections(){    MongoClient mongoClient = new MongoClient("127.0.0.1",27017);    MongoDatabase database = mongoClient.getDatabase("pbteach01");    MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");    List&lt;Document&gt; docList = new ArrayList&lt;Document&gt;();    for (int i = 0; i &lt; 10; i++) {        docList.add(new Document("name","java0"+i).append("age", i+10).append("address", "北京市 第"+i+"区"));    }    userCollection.insertMany(docList);    mongoClient.close();}</code></pre><h3 id="更新文档-1"><a href="#更新文档-1" class="headerlink" title="更新文档"></a>更新文档</h3><pre><code>/** * 根据条件更新文档(替换) */@Testpublic void testReplaceCollection(){    MongoClient mongoClient = new MongoClient("127.0.0.1",27017);    MongoDatabase database = mongoClient.getDatabase("pbteach01");    MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");    Document query = new Document("name","Rose");    Document update = new Document("name","Jerry");    userCollection.replaceOne(query,update);    mongoClient.close();}/** * 更新文档 */@Testpublic void testUpdateCollection(){    MongoClient mongoClient = new MongoClient("127.0.0.1",27017);    MongoDatabase database = mongoClient.getDatabase("pbteach01");    MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");    Document query = new Document("name","Rose");    Document update = new Document("name","Tomcat");    Document modifier = new Document("$set",update);    userCollection.updateOne(query,modifier);    mongoClient.close();}</code></pre><h3 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h3><pre><code> /**     * 查询文档 ---&gt; 查询全部     */    @Test    public void testQueryDocument(){        MongoClient mongoClient = new MongoClient("127.0.0.1",27017);        MongoDatabase database = mongoClient.getDatabase("pbteach01");        MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");        //获取所有结果        FindIterable&lt;Document&gt; documents = userCollection.find();        //获取第一个文档        Document document = documents.first();        System.out.println(document);        System.out.println();        //获取所有文档        for (Document doc : documents) {            System.out.println(doc);        }    }    /**     * 查询文档 ---&gt; 条件查询     */    @Test    public void testQueryDocumentByCondition(){        MongoClient mongoClient = new MongoClient("127.0.0.1",27017);        MongoDatabase database = mongoClient.getDatabase("pbteach01");        MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");        FindIterable&lt;Document&gt; documents = userCollection.find(new Document("name", "java01"));        //获取所有文档        for (Document doc : documents) {            System.out.println(doc);        }    }    /**     * 查询文档 ---&gt; 模糊查询     */    @Test    public void testQueryDocumentByLike(){        MongoClient mongoClient = new MongoClient("127.0.0.1",27017);        MongoDatabase database = mongoClient.getDatabase("pbteach01");        MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");//        Pattern pattern = Pattern.compile("java");  //包含java//        Pattern pattern = Pattern.compile("0$");    //以0结尾        Pattern pattern = Pattern.compile("JAVA",Pattern.CASE_INSENSITIVE); //包含JAVA,忽略大小写        FindIterable&lt;Document&gt; documents = userCollection.find(new Document("name", pattern));        //获取所有文档        for (Document doc : documents) {            System.out.println(doc);        }    }    /**     * 查询文档 ---&gt; 数字范围查询     */    @Test    public void testQueryNumericRange(){        MongoClient mongoClient = new MongoClient("127.0.0.1",27017);        MongoDatabase database = mongoClient.getDatabase("pbteach01");        MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");        FindIterable&lt;Document&gt; documents = userCollection.find(new Document("age", new Document("$gte",18)));        //获取所有文档        for (Document doc : documents) {            System.out.println(doc);        }    }    /**     * 分页查询     */    @Test    public void testQueryByPage(){        MongoClient mongoClient = new MongoClient("127.0.0.1",27017);        MongoDatabase database = mongoClient.getDatabase("pbteach01");        MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");        //在查询时, 指定分页参数        FindIterable&lt;Document&gt; documents = userCollection.find().limit(5).skip(5);        for (Document doc : documents) {            System.out.println(doc);        }    }</code></pre><h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h3><pre><code>/** * 删除文档 */@Testpublic void testDeleteDocument(){    MongoClient mongoClient = new MongoClient("127.0.0.1",27017);    MongoDatabase database = mongoClient.getDatabase("pbteach01");    MongoCollection&lt;Document&gt; userCollection = database.getCollection("user");    //根据ID删除    //userCollection.deleteOne(new Document("_id", new ObjectId("5c31ff53eabd231ba4bc3624")));    //删除符合条件的一条记录    //userCollection.deleteOne(new Document("name", "java01") );    //删除符合条件的多条记录    //userCollection.deleteMany(new Document("name", "java02"));    //删除全部文档    userCollection.deleteMany(new Document());}</code></pre><h1 id="MongoDB管理"><a href="#MongoDB管理" class="headerlink" title="MongoDB管理"></a>MongoDB管理</h1><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>创建用户</p><p>语法 :</p><pre><code>mongo&gt;db.createUser({ user: "&lt;name&gt;",  pwd: "&lt;cleartext password&gt;",  customData: { &lt;any information&gt; },  roles: [    { role: "&lt;role&gt;", db: "&lt;database&gt;" } | "&lt;role&gt;",    ...  ]})</code></pre><p>案例 :</p><pre><code>use admindb.createUser(     {       user:"root",       pwd:"1234",       roles:[{role:"root",db:"admin"}]     }  )</code></pre><p>角色说明 :</p><ol><li>数据库用户角色：read、readWrite;</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色：backup、restore；</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root</li></ol><p>查询用户</p><p>查询当前库下的所有用户：</p><pre><code>show users;</code></pre><p>修改用户</p><p>语法格式 :</p><pre><code>db.updateUser(  "&lt;username&gt;",  {    customData : { &lt;any information&gt; },    roles : [              { role: "&lt;role&gt;", db: "&lt;database&gt;" } | "&lt;role&gt;",              ...            ],    pwd: "&lt;cleartext password&gt;"    },    writeConcern: { &lt;write concern&gt; })</code></pre><p>案例 :</p><p>修改root用户的角色为readWriteAnyDatabase</p><pre><code>use admindb.updateUser("root",{roles:[{role:"readWriteAnyDatabase",db:"admin"}]})</code></pre><p>修改密码</p><p>语法格式 :</p><pre><code>db.changeUserPassword("username","newPasswd")</code></pre><p>案例 :</p><p>修改root用户的密码为123</p><pre><code>use admindb.changeUserPassword("root","123")</code></pre><p>删除用户</p><p>语法格式：</p><pre><code>db.dropUser("用户名")</code></pre><h3 id="认证登录"><a href="#认证登录" class="headerlink" title="认证登录"></a>认证登录</h3><p>1). 在 bin/mongod.cfg 中设置参数 security , 添加 :</p><pre><code>security:  authorization: enabled</code></pre><p>2). 重启MongoDB</p><p>3). 使用账号密码连接MongoDB数据库</p><p> mongo.exe -u root -p root –authenticationDatabase admin</p><p>4). java程序连接</p><pre><code> MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://root:root@localhost:27017"));</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ 企业级应用</title>
      <link href="/RabbitMQ-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
      <url>/RabbitMQ-%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-RabbitMQ介绍"><a href="#1-RabbitMQ介绍" class="headerlink" title="1 RabbitMQ介绍"></a>1 RabbitMQ介绍</h1><h2 id="1-1-应用场景"><a href="#1-1-应用场景" class="headerlink" title="1.1 应用场景"></a>1.1 应用场景</h2><p> MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。RabbitMQ官方地址：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><p>开发中消息队列通常有如下应用场景：</p><p>1、任务异步处理。</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p><p>2、应用程序解耦合</p><p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>市场上还有哪些消息队列？</p><p>ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ、Redis。</p><p>为什么使用RabbitMQ呢？</p><p>1、使得简单，功能强大。</p><p>2、基于AMQP协议。</p><p>3、社区活跃，文档完善。</p><p>4、高并发性能好，这主要得益于Erlang语言。</p><p>5、Spring Boot默认已集成RabbitMQ</p><h2 id="1-2-其它相关术语"><a href="#1-2-其它相关术语" class="headerlink" title="1.2 其它相关术语"></a>1.2 其它相关术语</h2><p>AMQP是什么 ？</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523259611885.png" alt="1523259611885"></p><p>总结：AMQP是一套公开的消息队列协议，最早在2003年被提出，它旨在从协议层定义消息通信数据的标准格式，为的就是解决MQ市场上协议不统一的问题。RabbitMQ就是遵循AMQP标准协议开发的MQ服务。</p><p>官方：<a href="http://www.amqp.org/" target="_blank" rel="noopener">http://www.amqp.org/</a></p><p>JMS是什么 ？</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523259867745.png" alt="1523259867745"></p><p>总结：</p><p>JMS是java提供的一套消息服务API标准，其目的是为所有的java应用程序提供统一的消息通信的标准，类似java的jdbc，只要遵循jms标准的应用程序之间都可以进行消息通信。它和AMQP有什么 不同，jms是java语言专属的消息服务标准，它是在api层定义标准，并且只能用于java应用；而AMQP是在协议层定义的标准，是跨语言的 。</p><h1 id="2-RabbitMQ工作原理"><a href="#2-RabbitMQ工作原理" class="headerlink" title="2 RabbitMQ工作原理"></a>2 RabbitMQ工作原理</h1><h2 id="2-1-RabbitMQ工作原理"><a href="#2-1-RabbitMQ工作原理" class="headerlink" title="2.1 RabbitMQ工作原理"></a>2.1 RabbitMQ工作原理</h2><p>下图是RabbitMQ的基本结构：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523347952813.png" alt="1523347952813"></p><p>组成部分说明如下：</p><ul><li>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue。</li><li>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。</li><li>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。</li><li>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。</li><li>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</li></ul><p>消息发布接收流程：</p><p>—–发送消息—–</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>—-接收消息—–</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><h2 id="2-2-RabbitMQ下载安装"><a href="#2-2-RabbitMQ下载安装" class="headerlink" title="2.2 RabbitMQ下载安装"></a>2.2 RabbitMQ下载安装</h2><h3 id="2-2-1-下载安装"><a href="#2-2-1-下载安装" class="headerlink" title="2.2.1 下载安装"></a>2.2.1 下载安装</h3><p> RabbitMQ由Erlang语言开发，Erlang语言用于并发及分布式系统的开发，在电信领域应用广泛，OTP（Open Telecom Platform）作为Erlang语言的一部分，包含了很多基于Erlang开发的中间件及工具库，安装RabbitMQ需要安装Erlang/OTP，并保持版本匹配，如下图：</p><p>RabbitMQ的下载地址：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a></p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1527861694827.png" alt="1527861694827"></p><p>本项目使用Erlang/OTP 20.3版本和RabbitMQ3.7.3版本。</p><p>1）下载erlang</p><p>地址如下：</p><p><a href="http://erlang.org/download/otp_win64_20.3.exe" target="_blank" rel="noopener">http://erlang.org/download/otp_win64_20.3.exe</a></p><p>或去老师提供的软件包中找到 otp_win64_20.3.exe，以管理员方式运行此文件，安装。</p><p>erlang安装完成需要配置erlang环境变量： ERLANG_HOME=D:\Program Files\erl9.3 在path中添加%ERLANG_HOME%\bin;</p><p>2）安装RabbitMQ</p><p><a href="https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.7.3" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-server/releases/tag/v3.7.3</a></p><p>或去老师提供的软件包中找到 rabbitmq-server-3.7.3.exe，以管理员方式运行此文件，安装。</p><h3 id="2-2-2启动"><a href="#2-2-2启动" class="headerlink" title="2.2.2启动"></a>2.2.2启动</h3><p>安装成功后会自动创建RabbitMQ服务并且启动。</p><p>1）从开始菜单启动RabbitMQ</p><p>完成在开始菜单找到RabbitMQ的菜单：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523257208235.png" alt="1523257208235"></p><p>RabbitMQ Service-install :安装服务</p><p>RabbitMQ Service-remove 删除服务</p><p>RabbitMQ Service-start 启动</p><p>RabbitMQ Service-stop 启动</p><p>2）如果没有开始菜单则进入安装目录下sbin目录手动启动：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1527783143681.png" alt="1527783143681"></p><p>1）安装并运行服务</p><p>rabbitmq-service.bat install 安装服务 rabbitmq-service.bat stop 停止服务 rabbitmq-service.bat start 启动服务</p><p>2）安装管理插件</p><p>安装rabbitMQ的管理插件，方便在浏览器端管理RabbitMQ</p><p>管理员身份运行 rabbitmq-plugins.bat enable rabbitmq_management</p><p>3、启动成功 登录RabbitMQ</p><p>进入浏览器，输入：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672</a></p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523258256434.png" alt="1523258256434"></p><p>初始账号和密码：guest/guest</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523258233598.png" alt="1523258233598"></p><h3 id="2-2-3-注意事项"><a href="#2-2-3-注意事项" class="headerlink" title="2.2.3 注意事项"></a>2.2.3 注意事项</h3><p>1、安装erlang和rabbitMQ以管理员身份运行。</p><p>2、当卸载重新安装时会出现RabbitMQ服务注册失败，此时需要进入注册表清理erlang</p><p>搜索RabbitMQ、ErlSrv，将对应的项全部删除。</p><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h2><p>按照官方教程(<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html)测试hello</a>%E6%B5%8B%E8%AF%95hello) world:</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523279887915.png" alt="1523279887915"></p><h3 id="2-2-1搭建环境"><a href="#2-2-1搭建环境" class="headerlink" title="2.2.1搭建环境"></a>2.2.1搭建环境</h3><p>1）java client</p><p>生产者和消费者都属于客户端，rabbitMQ的java客户端如下：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523262829237.png" alt="1523262829237"></p><p>我们先用 rabbitMQ官方提供的java client测试，目的是对RabbitMQ的交互过程有个清晰的认识。</p><p>参考 ：<a href="https://github.com/rabbitmq/rabbitmq-java-client/" target="_blank" rel="noopener">https://github.com/rabbitmq/rabbitmq-java-client/</a></p><p>2）创建maven工程</p><p>创建生产者工程和消费者工程，分别加入RabbitMQ java client的依赖。</p><p>test-rabbitmq-producer：生产者工程</p><p>test-rabbitmq-consumer：消费者工程</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;    &lt;version&gt;4.0.3&lt;/version&gt;&lt;!--此版本与spring boot 1.5.9版本匹配--&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="2-2-2-生产者"><a href="#2-2-2-生产者" class="headerlink" title="2.2.2 生产者"></a>2.2.2 生产者</h3><p>生产者操作流程如下：</p><p>1）创建连接</p><p>2）创建通道</p><p>3）声明队列</p><p>4）发送消息</p><p>在生产者工程下的test包中创建测试类如下：</p><pre><code>public class Producer01 {    //队列名称    private static final String QUEUE = "helloworld";    public static void main(String[] args) throws IOException, TimeoutException {        Connection connection = null;        Channel channel = null;        try        {            ConnectionFactory factory = new ConnectionFactory();            factory.setHost("localhost");            factory.setPort(5672);            factory.setUsername("guest");            factory.setPassword("guest");            factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器            //创建与RabbitMQ服务的TCP连接            connection  = factory.newConnection();            //创建与Exchange的通道，每个连接可以创建多个通道，每个通道代表一个会话任务            channel = connection.createChannel();            /**             * 声明队列，如果Rabbit中没有此队列将自动创建             * param1:队列名称             * param2:是否持久化             * param3:队列是否独占此连接             * param4:队列不再使用时是否自动删除此队列             * param5:队列参数             */            channel.queueDeclare(QUEUE, true, false, false, null);            String message = "helloworld小明"+System.currentTimeMillis();            /**             * 消息发布方法             * param1：Exchange的名称，如果没有指定，则使用Default Exchange             * param2:routingKey,消息的路由Key，是用于Exchange（交换机）将消息转发到指定的消息队列             * param3:消息包含的属性             * param4：消息体             */            /**             * 这里没有指定交换机，消息将发送给默认交换机，每个队列也会绑定那个默认的交换机，但是不能显示绑定或解除绑定             *　默认的交换机，routingKey等于队列名称             */            channel.basicPublish("", QUEUE, null, message.getBytes());            System.out.println("Send Message is:'" + message + "'");        }        catch(Exception ex)        {            ex.printStackTrace();        }        finally        {            if(channel != null)            {                channel.close();            }            if(connection != null)            {                connection.close();            }        }    }}</code></pre><h3 id="2-2-3-消费者"><a href="#2-2-3-消费者" class="headerlink" title="2.2.3 消费者"></a>2.2.3 消费者</h3><p>消费者操作流程如下：</p><p>1）创建连接</p><p>2）创建通道</p><p>3）声明队列</p><p>4）监听队列</p><p>5）接收消息</p><p>6）ack回复</p><p>在消费者工程下的test包中创建测试类如下：</p><pre><code>public class Consumer01 {    private static final String QUEUE = "helloworld";    public static void main(String[] args) throws IOException, TimeoutException {        ConnectionFactory factory = new ConnectionFactory();        //设置MabbitMQ所在服务器的ip和端口        factory.setHost("127.0.0.1");        factory.setPort(5672);        Connection connection = factory.newConnection();        Channel channel = connection.createChannel();        //声明队列        channel.queueDeclare(QUEUE, true, false, false, null);        //定义消费方法        DefaultConsumer consumer = new DefaultConsumer(channel) {            /**             * 消费者接收消息调用此方法             * @param consumerTag 消费者的标签，在channel.basicConsume()去指定             * @param envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)             * @param properties             * @param body             * @throws IOException             */            @Override            public void handleDelivery(String consumerTag,                                       Envelope envelope,                                       AMQP.BasicProperties properties,                                       byte[] body)                    throws IOException {                //交换机                String exchange = envelope.getExchange();                //路由key                String routingKey = envelope.getRoutingKey();                //消息id                long deliveryTag = envelope.getDeliveryTag();                //消息内容                String msg = new String(body,"utf-8");                System.out.println("receive message.." + msg);            }        };        /**         * 监听队列String queue, boolean autoAck,Consumer callback         * 参数明细         * 1、队列名称         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复         * 3、消费消息的方法，消费者接收到消息后调用此方法         */        channel.basicConsume(QUEUE, true, consumer);    }}</code></pre><h1 id="3-RabbitMQ工作模式"><a href="#3-RabbitMQ工作模式" class="headerlink" title="3 RabbitMQ工作模式"></a>3 RabbitMQ工作模式</h1><p>RabbitMQ有以下几种工作模式 ：</p><p>1、Work queues</p><p>2、Publish/Subscribe</p><p>3、Routing</p><p>4、Topics</p><p>5、Header</p><p>6、RPC</p><h2 id="3-1-Work-queues"><a href="#3-1-Work-queues" class="headerlink" title="3.1 Work queues"></a>3.1 Work queues</h2><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523279947675.png" alt="1523279947675"></p><p>work queues与入门程序相比，多了一个消费端，两个消费端共同消费同一个队列中的消息。</p><p>应用场景：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><p>测试：</p><p>1、使用入门程序，启动多个消费者。</p><p>2、生产者发送多个消息。</p><p>结果：</p><p>1、一条消息只会被一个消费者接收；</p><p>2、rabbit采用轮询的方式将消息是平均发送给消费者的；</p><p>3、消费者在处理完某条消息后，才会收到下一条消息。</p><h2 id="3-2-Publish-subscribe"><a href="#3-2-Publish-subscribe" class="headerlink" title="3.2 Publish/subscribe"></a>3.2 Publish/subscribe</h2><h3 id="3-2-1生产者"><a href="#3-2-1生产者" class="headerlink" title="3.2.1生产者"></a>3.2.1生产者</h3><p>3.2.1.1 发布订阅模式介绍</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523279926527.png" alt="1523279926527"></p><p>发布订阅模式：</p><p>1、每个消费者监听自己的队列。</p><p>2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</p><p>3.2.1.2 生产者代码</p><p>通过一个案例讲解发布订阅模式：</p><p>用户通知，当用户充值成功或转账完成系统通知用户，通知方式有短信、邮件多种方法 。</p><p>生产者代码如下：</p><p>声明Exchange_fanout_inform交换机。</p><p>声明两个队列并且绑定到此交换机，绑定时不需要指定routingkey</p><p>发送消息时不需要指定routingkey</p><pre><code>package com.pbteach.test.rabbitmq;import com.rabbitmq.client.*;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Producer02_publish {    //队列名称    private static final String QUEUE_INFORM_EMAIL = "queue_inform_email";    private static final String QUEUE_INFORM_SMS = "queue_inform_sms";    private static final String EXCHANGE_FANOUT_INFORM="exchange_fanout_inform";    public static void main(String[] args) {        Connection connection = null;        Channel channel = null;        try {            //创建一个与MQ的连接            ConnectionFactory factory = new ConnectionFactory();            factory.setHost("127.0.0.1");            factory.setPort(5672);            factory.setUsername("guest");            factory.setPassword("guest");            factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器            //创建一个连接            connection = factory.newConnection();            //创建与交换机的通道，每个通道代表一个会话            channel = connection.createChannel();            //声明交换机 String exchange, BuiltinExchangeType type            /**             * 参数明细             * 1、交换机名称             * 2、交换机类型，fanout、topic、direct、headers             */            channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);            //声明队列//           (String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)            /**             * 参数明细：             * 1、队列名称             * 2、是否持久化             * 3、是否独占此队列             * 4、队列不用是否自动删除             * 5、参数             */            channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);            channel.queueDeclare(QUEUE_INFORM_SMS, true, false, false, null);            //交换机和队列绑定String queue, String exchange, String routingKey            /**             * 参数明细             * 1、队列名称             * 2、交换机名称             * 3、路由key             */            channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,"");            channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_FANOUT_INFORM,"");            //发送消息            for (int i=0;i&lt;10;i++){                String message = "inform to user"+i;                //向交换机发送消息 String exchange, String routingKey, BasicProperties props, byte[] body                /**                 * 参数明细                 * 1、交换机名称，不指令使用默认交换机名称 Default Exchange                 * 2、routingKey（路由key），根据key名称将消息转发到具体的队列，这里填写队列名称表示消息将发到此队列                 * 3、消息属性                 * 4、消息内容                 */                channel.basicPublish(EXCHANGE_FANOUT_INFORM, "", null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }        } catch (IOException e) {            e.printStackTrace();        } catch (TimeoutException e) {            e.printStackTrace();        }finally{            if(channel!=null){                try {                    channel.close();                } catch (IOException e) {                    e.printStackTrace();                } catch (TimeoutException e) {                    e.printStackTrace();                }            }            if(connection!=null){                try {                    connection.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h3 id="3-2-2-消费者"><a href="#3-2-2-消费者" class="headerlink" title="3.2.2 消费者"></a>3.2.2 消费者</h3><p>3.2.2.1 消费者代码</p><p>邮件发送消费者代码如下：</p><pre><code>package com.pbteach.test.rabbitmq;import com.rabbitmq.client.*;import java.io.IOException;import java.util.concurrent.TimeoutException;/** * @author Administrator * @version 1.0 * @create 2018-06-14 10:32 **/public class Consumer02_subscribe_email {    //队列名称    private static final String QUEUE_INFORM_EMAIL = "inform_queue_email";    private static final String EXCHANGE_FANOUT_INFORM="inform_exchange_fanout";    public static void main(String[] args) throws IOException, TimeoutException {        //创建一个与MQ的连接        ConnectionFactory factory = new ConnectionFactory();        factory.setHost("127.0.0.1");        factory.setPort(5672);        factory.setUsername("guest");        factory.setPassword("guest");        factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器        //创建一个连接        Connection connection = factory.newConnection();        //创建与交换机的通道，每个通道代表一个会话        Channel channel = connection.createChannel();        //声明交换机 String exchange, BuiltinExchangeType type        /**         * 参数明细         * 1、交换机名称         * 2、交换机类型，fanout、topic、direct、headers         */        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);        //声明队列//            channel.queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)        /**         * 参数明细：         * 1、队列名称         * 2、是否持久化         * 3、是否独占此队列         * 4、队列不用是否自动删除         * 5、参数         */        channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);        //交换机和队列绑定String queue, String exchange, String routingKey        /**         * 参数明细         * 1、队列名称         * 2、交换机名称         * 3、路由key         */        channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_FANOUT_INFORM,"");        //定义消费方法        DefaultConsumer defaultConsumer = new DefaultConsumer(channel) {            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                long deliveryTag = envelope.getDeliveryTag();                String exchange = envelope.getExchange();                //消息内容                String message = new String(body, "utf-8");                System.out.println(message);            }        };        /**         * 监听队列String queue, boolean autoAck,Consumer callback         * 参数明细         * 1、队列名称         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复         * 3、消费消息的方法，消费者接收到消息后调用此方法         */        channel.basicConsume(QUEUE_INFORM_EMAIL, true, defaultConsumer);    }}</code></pre><p>按照上边的代码，编写邮件通知的消费代码。</p><p>3、短信发送消费者</p><p>参考上边的邮件发送消费者代码编写。</p><p>3.2.2.2 测试</p><p>打开RabbitMQ的管理界面，观察交换机绑定情况：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1528961168388.png" alt="1528961168388"></p><p>使用生产者发送若干条消息，每条消息都转发到各各队列，每消费者都接收到了消息。</p><p>3.2.2.3 小结</p><p>1、publish/subscribe与work queues有什么区别。</p><p>区别：</p><p>1）work queues不用定义交换机，而publish/subscribe需要定义交换机。</p><p>2）publish/subscribe的生产方是面向交换机发送消息，work queues的生产方是面向队列发送消息(底层使用默认交换机)。</p><p>3）publish/subscribe需要设置队列和交换机的绑定，work queues不需要设置，实质上work queues会将队列绑定到默认的交换机 。</p><p>相同点：</p><p>所以两者实现的发布/订阅的效果是一样的，多个消费端监听同一个队列不会重复消费消息。</p><p>2、实质工作用什么 publish/subscribe还是work queues。</p><p>建议使用 publish/subscribe，发布订阅模式比工作队列模式更强大，并且发布订阅模式可以指定自己专用的交换机。</p><h2 id="3-3-Routing路由模式"><a href="#3-3-Routing路由模式" class="headerlink" title="3.3 Routing路由模式"></a>3.3 Routing路由模式</h2><h3 id="3-3-1-路由模式介绍"><a href="#3-3-1-路由模式介绍" class="headerlink" title="3.3.1 路由模式介绍"></a>3.3.1 路由模式介绍</h3><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523280015356.png" alt="1523280015356"></p><p>路由模式：</p><p>1、每个消费者监听自己的队列，并且设置routingkey。</p><p>2、生产者将消息发给交换机，由交换机根据routingkey来转发消息到指定的队列。</p><h3 id="3-3-2-生产者"><a href="#3-3-2-生产者" class="headerlink" title="3.3.2 生产者"></a>3.3.2 生产者</h3><p>声明exchange_routing_inform交换机。</p><p>声明两个队列并且绑定到此交换机，绑定时需要指定routingkey</p><p>发送消息时需要指定routingkey</p><pre><code>package com.pbteach.test.rabbitmq;import com.rabbitmq.client.BuiltinExchangeType;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Producer03_routing {    //队列名称    private static final String QUEUE_INFORM_EMAIL = "queue_inform_email";    private static final String QUEUE_INFORM_SMS = "queue_inform_sms";    private static final String EXCHANGE_ROUTING_INFORM="exchange_routing_inform";    public static void main(String[] args) {        Connection connection = null;        Channel channel = null;        try {            //创建一个与MQ的连接            ConnectionFactory factory = new ConnectionFactory();            factory.setHost("127.0.0.1");            factory.setPort(5672);            factory.setUsername("guest");            factory.setPassword("guest");            factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器            //创建一个连接            connection = factory.newConnection();            //创建与交换机的通道，每个通道代表一个会话            channel = connection.createChannel();            //声明交换机 String exchange, BuiltinExchangeType type            /**             * 参数明细             * 1、交换机名称             * 2、交换机类型，fanout、topic、direct、headers             */            channel.exchangeDeclare(EXCHANGE_ROUTING_INFORM, BuiltinExchangeType.DIRECT);            //声明队列//            channel.queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)            /**             * 参数明细：             * 1、队列名称             * 2、是否持久化             * 3、是否独占此队列             * 4、队列不用是否自动删除             * 5、参数             */            channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);            channel.queueDeclare(QUEUE_INFORM_SMS, true, false, false, null);            //交换机和队列绑定String queue, String exchange, String routingKey            /**             * 参数明细             * 1、队列名称             * 2、交换机名称             * 3、路由key             */            channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_ROUTING_INFORM,QUEUE_INFORM_EMAIL);            channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_ROUTING_INFORM,QUEUE_INFORM_SMS);            //发送邮件消息            for (int i=0;i&lt;10;i++){                String message = "email inform to user"+i;                //向交换机发送消息 String exchange, String routingKey, BasicProperties props, byte[] body                /**                 * 参数明细                 * 1、交换机名称，不指令使用默认交换机名称 Default Exchange                 * 2、routingKey（路由key），根据key名称将消息转发到具体的队列，这里填写队列名称表示消息将发到此队列                 * 3、消息属性                 * 4、消息内容                 */                channel.basicPublish(EXCHANGE_ROUTING_INFORM, QUEUE_INFORM_EMAIL, null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }            //发送短信消息            for (int i=0;i&lt;10;i++){                String message = "sms inform to user"+i;                //向交换机发送消息 String exchange, String routingKey, BasicProperties props, byte[] body                channel.basicPublish(EXCHANGE_ROUTING_INFORM, QUEUE_INFORM_SMS, null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }        } catch (IOException e) {            e.printStackTrace();        } catch (TimeoutException e) {            e.printStackTrace();        }finally{            if(channel!=null){                try {                    channel.close();                } catch (IOException e) {                    e.printStackTrace();                } catch (TimeoutException e) {                    e.printStackTrace();                }            }            if(connection!=null){                try {                    connection.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h3 id="3-3-3-消费者"><a href="#3-3-3-消费者" class="headerlink" title="3.3.3 消费者"></a>3.3.3 消费者</h3><p>邮件发送消费者代码：</p><pre><code>package com.pbteach.test.rabbitmq;import com.rabbitmq.client.*;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Consumer03_routing_email {    //队列名称    private static final String QUEUE_INFORM_EMAIL = "inform_queue_email";    private static final String EXCHANGE_ROUTING_INFORM="inform_exchange_routing";    public static void main(String[] args) throws IOException, TimeoutException {        //创建一个与MQ的连接        ConnectionFactory factory = new ConnectionFactory();        factory.setHost("127.0.0.1");        factory.setPort(5672);        factory.setUsername("guest");        factory.setPassword("guest");        factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器        //创建一个连接        Connection connection = factory.newConnection();        //创建与交换机的通道，每个通道代表一个会话        Channel channel = connection.createChannel();        //声明交换机 String exchange, BuiltinExchangeType type        /**         * 参数明细         * 1、交换机名称         * 2、交换机类型，fanout、topic、direct、headers         */        channel.exchangeDeclare(EXCHANGE_ROUTING_INFORM, BuiltinExchangeType.DIRECT);        //声明队列//            channel.queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)        /**         * 参数明细：         * 1、队列名称         * 2、是否持久化         * 3、是否独占此队列         * 4、队列不用是否自动删除         * 5、参数         */        channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);        //交换机和队列绑定String queue, String exchange, String routingKey        /**         * 参数明细         * 1、队列名称         * 2、交换机名称         * 3、路由key         */        channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_ROUTING_INFORM,QUEUE_INFORM_EMAIL);        //定义消费方法        DefaultConsumer defaultConsumer = new DefaultConsumer(channel) {            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                long deliveryTag = envelope.getDeliveryTag();                String exchange = envelope.getExchange();                //消息内容                String message = new String(body, "utf-8");                System.out.println(message);            }        };        /**         * 监听队列String queue, boolean autoAck,Consumer callback         * 参数明细         * 1、队列名称         * 2、是否自动回复，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动回复         * 3、消费消息的方法，消费者接收到消息后调用此方法         */        channel.basicConsume(QUEUE_INFORM_EMAIL, true, defaultConsumer);    }}</code></pre><p>3、短信发送消费者</p><p>参考邮件发送消费者的代码流程，编写短信通知的代码。</p><h3 id="3-3-4-测试"><a href="#3-3-4-测试" class="headerlink" title="3.3.4 测试"></a>3.3.4 测试</h3><p>打开RabbitMQ的管理界面，观察交换机绑定情况：</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1528961237978.png" alt="1528961237978"></p><p>使用生产者发送若干条消息，交换机根据routingkey转发消息到指定的队列。</p><h3 id="3-4-5-小结"><a href="#3-4-5-小结" class="headerlink" title="3.4.5 小结"></a>3.4.5 小结</h3><p>1、Routing模式和Publish/subscibe有啥区别？</p><p>Routing模式要求队列在绑定交换机时要指定routingkey，消息会转发到符合routingkey的队列。</p><h2 id="3-4-Topics"><a href="#3-4-Topics" class="headerlink" title="3.4 Topics"></a>3.4 Topics</h2><h3 id="3-4-1统配符模式介绍"><a href="#3-4-1统配符模式介绍" class="headerlink" title="3.4.1统配符模式介绍"></a>3.4.1统配符模式介绍</h3><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523280027459.png" alt="1523280027459"></p><p>路由模式：</p><p>1、每个消费者监听自己的队列，并且设置带统配符的routingkey。</p><p>2、生产者将消息发给broker，由交换机根据routingkey来转发消息到指定的队列。</p><h3 id="3-4-2生产者"><a href="#3-4-2生产者" class="headerlink" title="3.4.2生产者"></a>3.4.2生产者</h3><p>案例：</p><p>根据用户的通知设置去通知用户，设置接收Email的用户只接收Email，设置接收sms的用户只接收sms，设置两种通知类型都接收的则两种通知都有效。</p><p>生产者代码如下：</p><p>声明交换机，指定topic类型：</p><pre><code>/** * 声明交换机 * param1：交换机名称 * param2:交换机类型 四种交换机类型：direct、fanout、topic、headers */ channel.exchangeDeclare(EXCHANGE_TOPICS_INFORM, BuiltinExchangeType.TOPIC);//Email通知channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.email", null, message.getBytes());//sms通知channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.sms", null, message.getBytes());//两种都通知channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.sms.email", null, message.getBytes());</code></pre><p>完整代码：</p><pre><code>package com.pbteach.test.rabbitmq;import com.rabbitmq.client.BuiltinExchangeType;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Producer04_topics {    //队列名称    private static final String QUEUE_INFORM_EMAIL = "queue_inform_email";    private static final String QUEUE_INFORM_SMS = "queue_inform_sms";    private static final String EXCHANGE_TOPICS_INFORM="exchange_topics_inform";    public static void main(String[] args) {        Connection connection = null;        Channel channel = null;        try {            //创建一个与MQ的连接            ConnectionFactory factory = new ConnectionFactory();            factory.setHost("127.0.0.1");            factory.setPort(5672);            factory.setUsername("guest");            factory.setPassword("guest");            factory.setVirtualHost("/");//rabbitmq默认虚拟机名称为“/”，虚拟机相当于一个独立的mq服务器            //创建一个连接            connection = factory.newConnection();            //创建与交换机的通道，每个通道代表一个会话            channel = connection.createChannel();            //声明交换机 String exchange, BuiltinExchangeType type            /**             * 参数明细             * 1、交换机名称             * 2、交换机类型，fanout、topic、direct、headers             */            channel.exchangeDeclare(EXCHANGE_TOPICS_INFORM, BuiltinExchangeType.TOPIC);            //声明队列            /**             * 参数明细：             * 1、队列名称             * 2、是否持久化             * 3、是否独占此队列             * 4、队列不用是否自动删除             * 5、参数             */            channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);            channel.queueDeclare(QUEUE_INFORM_SMS, true, false, false, null);            //发送邮件消息            for (int i=0;i&lt;10;i++){                String message = "email inform to user"+i;                //向交换机发送消息 String exchange, String routingKey, BasicProperties props, byte[] body                /**                 * 参数明细                 * 1、交换机名称，不指令使用默认交换机名称 Default Exchange                 * 2、routingKey（路由key），根据key名称将消息转发到具体的队列，这里填写队列名称表示消息将发到此队列                 * 3、消息属性                 * 4、消息内容                 */                channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.email", null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }            //发送短信消息            for (int i=0;i&lt;10;i++){                String message = "sms inform to user"+i;                channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.sms", null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }            //发送短信和邮件消息            for (int i=0;i&lt;10;i++){                String message = "sms and email inform to user"+i;                channel.basicPublish(EXCHANGE_TOPICS_INFORM, "inform.sms.email", null, message.getBytes());                System.out.println("Send Message is:'" + message + "'");            }        } catch (IOException e) {            e.printStackTrace();        } catch (TimeoutException e) {            e.printStackTrace();        }finally{            if(channel!=null){                try {                    channel.close();                } catch (IOException e) {                    e.printStackTrace();                } catch (TimeoutException e) {                    e.printStackTrace();                }            }            if(connection!=null){                try {                    connection.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h3 id="3-4-3-消费端"><a href="#3-4-3-消费端" class="headerlink" title="3.4.3 消费端"></a>3.4.3 消费端</h3><p>队列绑定交换机指定通配符：</p><p>统配符规则：</p><p>中间以“.”分隔。</p><p>符号#可以匹配多个词，符号*可以匹配一个词语。</p><pre><code> //声明队列channel.queueDeclare(QUEUE_INFORM_EMAIL, true, false, false, null);channel.queueDeclare(QUEUE_INFORM_SMS, true, false, false, null);//声明交换机channel.exchangeDeclare(EXCHANGE_TOPICS_INFORM, BuiltinExchangeType.TOPIC);//绑定email通知队列channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_TOPICS_INFORM,"inform.#.email.#");//绑定sms通知队列 channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_TOPICS_INFORM,"inform.#.sms.#");</code></pre><h3 id="3-4-4-测试"><a href="#3-4-4-测试" class="headerlink" title="3.4.4 测试"></a>3.4.4 测试</h3><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1528961269822.png" alt="1528961269822"></p><p>使用生产者发送若干条消息，交换机根据routingkey统配符匹配并转发消息到指定的队列。</p><h3 id="3-4-5-小结-1"><a href="#3-4-5-小结-1" class="headerlink" title="3.4.5 小结"></a>3.4.5 小结</h3><p>1、本案例的需求使用Routing工作模式能否实现？</p><p>使用Routing模式也可以实现本案例，共设置三个 routingkey，分别是email、sms、all，email队列绑定email和all，sms队列绑定sms和all，这样就可以实现上边案例的功能，实现过程比topics复杂。</p><p>Topic模式更多加强大，它可以实现Routing、publish/subscirbe模式的功能。</p><h2 id="3-5-其它模式"><a href="#3-5-其它模式" class="headerlink" title="3.5 其它模式"></a>3.5 其它模式</h2><h3 id="3-5-1-Header模式"><a href="#3-5-1-Header模式" class="headerlink" title="3.5.1 Header模式"></a>3.5.1 Header模式</h3><p> header模式与routing不同的地方在于，header模式取消routingkey，使用header中的 key/value（键值对）匹配队列。</p><p>案例：</p><p>根据用户的通知设置去通知用户，设置接收Email的用户只接收Email，设置接收sms的用户只接收sms，设置两种通知类型都接收的则两种通知都有效。</p><p>代码：</p><p>1）生产者</p><p>队列与交换机绑定的代码与之前不同，如下：</p><pre><code>Map&lt;String, Object&gt; headers_email = new Hashtable&lt;String, Object&gt;();headers_email.put("inform_type", "email");Map&lt;String, Object&gt; headers_sms = new Hashtable&lt;String, Object&gt;();headers_sms.put("inform_type", "sms");channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_HEADERS_INFORM,"",headers_email);channel.queueBind(QUEUE_INFORM_SMS,EXCHANGE_HEADERS_INFORM,"",headers_sms);</code></pre><p>通知：</p><pre><code>String message = "email inform to user"+i;Map&lt;String,Object&gt; headers =  new Hashtable&lt;String, Object&gt;();headers.put("inform_type", "email");//匹配email通知消费者绑定的header//headers.put("inform_type", "sms");//匹配sms通知消费者绑定的headerAMQP.BasicProperties.Builder properties = new AMQP.BasicProperties.Builder();properties.headers(headers);//Email通知channel.basicPublish(EXCHANGE_HEADERS_INFORM, "", properties.build(), message.getBytes());</code></pre><p>2）发送邮件消费者</p><pre><code>channel.exchangeDeclare(EXCHANGE_HEADERS_INFORM, BuiltinExchangeType.HEADERS);Map&lt;String, Object&gt; headers_email = new Hashtable&lt;String, Object&gt;();headers_email.put("inform_email", "email");//交换机和队列绑定channel.queueBind(QUEUE_INFORM_EMAIL,EXCHANGE_HEADERS_INFORM,"",headers_email);//指定消费队列channel.basicConsume(QUEUE_INFORM_EMAIL, true, consumer);</code></pre><p>3)测试</p><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523375791602.png" alt="1523375791602"></p><h3 id="3-5-2-RPC"><a href="#3-5-2-RPC" class="headerlink" title="3.5.2 RPC"></a>3.5.2 RPC</h3><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1523350538606.png" alt="1523350538606"></p><p>RPC即客户端远程调用服务端的方法 ，使用MQ可以实现RPC的异步调用，基于Direct交换机实现，流程如下：</p><p>1、客户端即是生产者就是消费者，向RPC请求队列发送RPC调用消息，同时监听RPC响应队列。</p><p>2、服务端监听RPC请求队列的消息，收到消息后执行服务端的方法，得到方法返回的结果</p><p>3、服务端将RPC方法 的结果发送到RPC响应队列</p><p>4、客户端（RPC调用方）监听RPC响应队列，接收到RPC调用结果。</p><h1 id="4-Spring整合RibbitMQ"><a href="#4-Spring整合RibbitMQ" class="headerlink" title="4 Spring整合RibbitMQ"></a>4 Spring整合RibbitMQ</h1><h2 id="4-1-搭建环境"><a href="#4-1-搭建环境" class="headerlink" title="4.1 搭建环境"></a>4.1 搭建环境</h2><h3 id="4-1-1-添加依赖"><a href="#4-1-1-添加依赖" class="headerlink" title="4.1.1 添加依赖"></a>4.1.1 添加依赖</h3><p>我们选择基于Spring-Rabbit去操作RabbitMQ</p><p><a href="https://github.com/spring-projects/spring-amqp" target="_blank" rel="noopener">https://github.com/spring-projects/spring-amqp</a></p><p>使用spring-boot-starter-amqp会自动添加spring-rabbit依赖，如下：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="4-1-2-配置application-yml"><a href="#4-1-2-配置application-yml" class="headerlink" title="4.1.2 配置application.yml"></a>4.1.2 配置application.yml</h3><p>配置连接rabbitmq的参数</p><pre><code>server:  port: 44000spring:  application:    name: test-rabbitmq-producer  rabbitmq:    host: 127.0.0.1    port: 5672    username: guest    passowrd: guest    virtualHost: /</code></pre><h3 id="4-1-3-配置交换机和队列"><a href="#4-1-3-配置交换机和队列" class="headerlink" title="4.1.3 配置交换机和队列"></a>4.1.3 配置交换机和队列</h3><p>定义RabbitConfig类，配置Exchange、Queue、及绑定交换机。</p><p>本例配置Topic交换机。</p><pre><code>package com.pbteach.test.rabbitmq.config;import org.springframework.amqp.core.*;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class RabbitmqConfig {    public static final String QUEUE_INFORM_EMAIL = "queue_inform_email";    public static final String QUEUE_INFORM_SMS = "queue_inform_sms";    public static final String EXCHANGE_TOPICS_INFORM="exchange_topics_inform";    /**     * 交换机配置     * ExchangeBuilder提供了fanout、direct、topic、header交换机类型的配置     * @return the exchange     */    @Bean(EXCHANGE_TOPICS_INFORM)    public Exchange EXCHANGE_TOPICS_INFORM() {         //durable(true)持久化，消息队列重启后交换机仍然存在        return ExchangeBuilder.topicExchange(EXCHANGE_TOPICS_INFORM).durable(true).build();    }    //声明队列    @Bean(QUEUE_INFORM_SMS)    public Queue QUEUE_INFORM_SMS() {        Queue queue = new Queue(QUEUE_INFORM_SMS);        return queue;    }    //声明队列    @Bean(QUEUE_INFORM_EMAIL)    public Queue QUEUE_INFORM_EMAIL() {        Queue queue = new Queue(QUEUE_INFORM_EMAIL);        return queue;    }    /** channel.queueBind(INFORM_QUEUE_SMS,"inform_exchange_topic","inform.#.sms.#");     * 绑定队列到交换机 .     *     * @param queue    the queue     * @param exchange the exchange     * @return the binding     */    @Bean    public Binding BINDING_QUEUE_INFORM_SMS(@Qualifier(QUEUE_INFORM_SMS) Queue queue, @Qualifier(EXCHANGE_TOPICS_INFORM) Exchange exchange) {        return BindingBuilder.bind(queue).to(exchange).with("inform.#.sms.#").noargs();    }    @Bean    public Binding BINDING_QUEUE_INFORM_EMAIL(@Qualifier(QUEUE_INFORM_EMAIL) Queue queue, @Qualifier(EXCHANGE_TOPICS_INFORM) Exchange exchange) {        return BindingBuilder.bind(queue).to(exchange).with("inform.#.email.#").noargs();    }}</code></pre><h2 id="4-3-生产者"><a href="#4-3-生产者" class="headerlink" title="4.3 生产者"></a>4.3 生产者</h2><p>使用RarbbitTemplate发送消息</p><pre><code>package com.pbteach.test.rabbitmq;import com.pbteach.test.rabbitmq.config.RabbitmqConfig;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@SpringBootTest@RunWith(SpringRunner.class)public class Producer05_topics_springboot {   @Autowired    RabbitTemplate rabbitTemplate;    @Test    public void testSendByTopics(){        for (int i=0;i&lt;5;i++){            String message = "sms email inform to user"+i;            rabbitTemplate.convertAndSend(RabbitmqConfig.EXCHANGE_TOPICS_INFORM,"inform.sms.email",message);            System.out.println("Send Message is:'" + message + "'");        }    }}</code></pre><h2 id="4-4消费者"><a href="#4-4消费者" class="headerlink" title="4.4消费者"></a>4.4消费者</h2><h3 id="4-4-1-消费者代码"><a href="#4-4-1-消费者代码" class="headerlink" title="4.4.1 消费者代码"></a>4.4.1 消费者代码</h3><p>创建消费端工程，添加依赖：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>使用@RabbitListener注解监听队列。</p><pre><code>package com.pbteach.test.rabbitmq.mq;import com.rabbitmq.client.Channel;import com.pbteach.test.rabbitmq.config.RabbitmqConfig;import org.springframework.amqp.core.Message;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Componentpublic class ReceiveHandler {    //监听email队列    @RabbitListener(queues = {RabbitmqConfig.QUEUE_INFORM_EMAIL})    public void receive_email(String msg,Message message,Channel channel){        System.out.println(msg);    }    //监听sms队列    @RabbitListener(queues = {RabbitmqConfig.QUEUE_INFORM_SMS})    public void receive_sms(String msg,Message message,Channel channel){        System.out.println(msg);    }}</code></pre><h3 id="4-4-2-测试"><a href="#4-4-2-测试" class="headerlink" title="4.4.2 测试"></a>4.4.2 测试</h3><p><img src="http://www.pbteach.com/post/java_distribut/rabbitmq_yq_doc/1528961105640.png" alt="1528961105640"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security分布式认证方案</title>
      <link href="/Spring-Security%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
      <url>/Spring-Security%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-Security分布式认证方案"><a href="#1-Spring-Security分布式认证方案" class="headerlink" title="1.Spring Security分布式认证方案"></a>1.Spring Security分布式认证方案</h2><h3 id="1-1需求分析"><a href="#1-1需求分析" class="headerlink" title="1.1需求分析"></a>1.1需求分析</h3><p>Spring Security分布式认证方案方案如下：</p><p><img src="http://www.pbteach.com/article/framework/springsecurity_pro1/1568037393732.png" alt="1568037393732"></p><p>1，UAA认证服务负责认证授权。</p><p>2，所有请求通过网关到达微服务</p><p>3，网关负责鉴权客户端以及请求转发</p><p>4，网关将令牌解析后传给微服务，微服务进行授权。</p><h3 id="1-2。注册中心"><a href="#1-2。注册中心" class="headerlink" title="1.2。注册中心"></a>1.2。注册中心</h3><p>所有微服务的请求都经过网关，网关从注册中心读取微服务的地址，将请求转发至微服务。</p><p>本节完成注册中心的建造，注册中心采用Eureka。</p><p>1，创建maven工程</p><p><img src="http://www.pbteach.com/article/framework/springsecurity_pro1/1572012457023.png" alt="1572012457023"></p><p>2，pom.xml依赖如下</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>distributed<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>distributed<span class="token operator">-</span>security<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><p>3，配置文件</p><p>在资源中配置application.yml</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>    application<span class="token operator">:</span>        name<span class="token operator">:</span> distributed<span class="token operator">-</span>discoveryserver<span class="token operator">:</span>    port<span class="token operator">:</span> <span class="token number">53000</span> #启动端口eureka<span class="token operator">:</span>  server<span class="token operator">:</span>    enable<span class="token operator">-</span>self<span class="token operator">-</span>preservation<span class="token operator">:</span> <span class="token boolean">false</span>    #关闭服务器自我保护，客户端心跳检测<span class="token number">15</span>分钟内错误达到<span class="token number">80</span><span class="token operator">%</span>服务会保护，导致别人还认为是好用的服务    eviction<span class="token operator">-</span>interval<span class="token operator">-</span>timer<span class="token operator">-</span>in<span class="token operator">-</span>ms<span class="token operator">:</span> <span class="token number">10000</span> #清理间隔（单位毫秒，默认是<span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>）<span class="token number">5</span>秒将客户端剔除的服务在服务注册列表中剔除#     shouldUseReadOnlyResponseCache<span class="token operator">:</span> <span class="token boolean">true</span> #eureka是CAP理论种基于AP策略，为了保证强一致性关闭此切换CP 默认不关闭 <span class="token boolean">false</span>关闭  client<span class="token operator">:</span>     register<span class="token operator">-</span>with<span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">false</span>  #<span class="token boolean">false</span><span class="token operator">:</span>不作为一个客户端注册到注册中心    fetch<span class="token operator">-</span>registry<span class="token operator">:</span> <span class="token boolean">false</span>      #为<span class="token boolean">true</span>时，可以启动，但报异常：Cannot execute request on any known server    instance<span class="token operator">-</span>info<span class="token operator">-</span>replication<span class="token operator">-</span>interval<span class="token operator">-</span>seconds<span class="token operator">:</span> <span class="token number">10</span>     serviceUrl<span class="token operator">:</span>       defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span>$<span class="token punctuation">{</span>server<span class="token punctuation">.</span>port<span class="token punctuation">}</span><span class="token operator">/</span>eureka<span class="token operator">/</span>  instance<span class="token operator">:</span>    hostname<span class="token operator">:</span> $<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ip<span class="token operator">-</span>address<span class="token punctuation">}</span>    prefer<span class="token operator">-</span>ip<span class="token operator">-</span>address<span class="token operator">:</span> <span class="token boolean">true</span>    instance<span class="token operator">-</span>id<span class="token operator">:</span> $<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ip<span class="token operator">-</span>address<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>instance_id<span class="token operator">:</span>$<span class="token punctuation">{</span>server<span class="token punctuation">.</span>port<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动类：``</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>discovery<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableEurekaServer<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscoveryServer</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DiscoveryServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3。网关"><a href="#1-3。网关" class="headerlink" title="1.3。网关"></a>1.3。网关</h3><p>网关整合OAuth2.0有<strong>两种思路</strong>，一种是认证服务器生成jwt令牌，所有请求统一在网关层验证，判断权限等操作；另一种是由各资源服务处理，网关只做请求转发。</p><p>我们替换第一种。我们将API网关作为OAuth2.0的资源服务器角色，实现接收客户端权限拦截，令牌解析并转发当前登录用户信息（jsonToken）给微服务，这样下游微服务就不需要关心令牌格式解析以及OAuth2.0相关机制了。</p><p>API网关在认证授权体系里主要负责两件事：</p><p>（1）作为OAuth2.0的<strong>资源服务器</strong>角色，实现接收方权限拦截。</p><p>（2）令牌解析并转发当前登录用户信息（明文令牌）给微服务</p><p>微服务拿到明文token（明文token中包含登录用户的身份和权限信息）后也需要做两件事：</p><p>（1）用户授权拦截（看当前用户是否有权访问该资源）</p><p>（2）将用户信息存储进来的当前线程片段（有利于后续业务逻辑随时获取当前用户信息）</p><p>1.3.1创建工程</p><p><img src="http://www.pbteach.com/article/framework/springsecurity_pro1/1572012550869.png" alt="1572012550869"></p><p>1，pom.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>distributed<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>distributed<span class="token operator">-</span>security<span class="token operator">-</span>gateway<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>ribbon<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>hystrix<span class="token operator">-</span>javanica<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>zuul<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>oauth2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>security<span class="token operator">-</span>jwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>interceptor<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javax<span class="token punctuation">.</span>interceptor<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><p>2，配置文件</p><p>配置application.properties</p><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>gateway<span class="token operator">-</span>serverserver<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">53010</span>spring<span class="token punctuation">.</span>main<span class="token punctuation">.</span>allow<span class="token operator">-</span>bean<span class="token operator">-</span>definition<span class="token operator">-</span>overriding <span class="token operator">=</span> <span class="token boolean">true</span>logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>root <span class="token operator">=</span> infologging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>org<span class="token punctuation">.</span>springframework <span class="token operator">=</span> infozuul<span class="token punctuation">.</span>retryable <span class="token operator">=</span> <span class="token boolean">true</span>zuul<span class="token punctuation">.</span>ignoredServices <span class="token operator">=</span> <span class="token operator">*</span>zuul<span class="token punctuation">.</span>add<span class="token operator">-</span>host<span class="token operator">-</span>header <span class="token operator">=</span> <span class="token boolean">true</span>zuul<span class="token punctuation">.</span>sensitiveHeaders <span class="token operator">=</span> <span class="token operator">*</span>zuul<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>uaa<span class="token operator">-</span>service<span class="token punctuation">.</span>stripPrefix <span class="token operator">=</span> <span class="token boolean">false</span>zuul<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>uaa<span class="token operator">-</span>service<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token operator">/</span>uaa<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>zuul<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>order<span class="token operator">-</span>service<span class="token punctuation">.</span>stripPrefix <span class="token operator">=</span> <span class="token boolean">false</span>zuul<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>order<span class="token operator">-</span>service<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token operator">/</span>order<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>eureka<span class="token punctuation">.</span>client<span class="token punctuation">.</span>serviceUrl<span class="token punctuation">.</span>defaultZone <span class="token operator">=</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">53000</span><span class="token operator">/</span>eureka<span class="token operator">/</span>eureka<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>preferIpAddress <span class="token operator">=</span> <span class="token boolean">true</span>eureka<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>instance<span class="token operator">-</span>id <span class="token operator">=</span> $<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ip<span class="token operator">-</span>address<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>instance_id<span class="token operator">:</span>$<span class="token punctuation">{</span>server<span class="token punctuation">.</span>port<span class="token punctuation">}</span><span class="token punctuation">}</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>include <span class="token operator">=</span> refresh<span class="token punctuation">,</span>health<span class="token punctuation">,</span>info<span class="token punctuation">,</span>envfeign<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span>feign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>request<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span>feign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>request<span class="token punctuation">.</span>mime<span class="token operator">-</span>types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> text<span class="token operator">/</span>xmlfeign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>request<span class="token punctuation">.</span>mime<span class="token operator">-</span>types<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> application<span class="token operator">/</span>xmlfeign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>request<span class="token punctuation">.</span>mime<span class="token operator">-</span>types<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> application<span class="token operator">/</span>jsonfeign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>request<span class="token punctuation">.</span>min<span class="token operator">-</span>request<span class="token operator">-</span>size <span class="token operator">=</span> <span class="token number">2048</span>feign<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>response<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>统一认证服务（UAA）与统一用户服务都是网关下微服务，需要在网关上添加路由配置：</p><pre><code>zuul.routes.uaa-service.stripPrefix = falsezuul.routes.uaa-service.path = /uaa/**zuul.routes.user-service.stripPrefix = falsezuul.routes.user-service.path = /order/**</code></pre><p>上面的配置了网关接收的请求网址若符合/ order / **表达式，将被转发至order-service（统一用户服务）。</p><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableZuulProxy</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GatewayServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.3.2令牌配置</p><p>前面也介绍了，<strong>资源服务器</strong>需要需要验证并解析令牌，经常可以通过在授权服务器暴露check_token的Endpoint来完成，而我们在授权服务器使用的是对称加密的jwt，因此知道密钥即可，资源服务与授权服务本就是对称设计，那我们把授权服务的令牌配置两个类拷贝过来就行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>TokenStore<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>store<span class="token punctuation">.</span>JwtAccessTokenConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>store<span class="token punctuation">.</span>JwtTokenStore<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenConfig</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String SIGNING_KEY <span class="token operator">=</span> <span class="token string">"uaa123"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TokenStore <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JwtAccessTokenConverter <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtAccessTokenConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>SIGNING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对称秘钥，资源服务器使用该秘钥来解密</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.3.3配置资源服务</p><p>在ResouceServerConfig中定义资源服务配置，主要配置的内容就是定义一些匹配规则，描述某些接收客户端需要某种权限才能访问某个微服务，如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResouceServerConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RESOURCE_ID <span class="token operator">=</span> <span class="token string">"res1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 统一认证服务(UAA) 资源拦截     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@EnableResourceServer</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UAAServerConfig</span> <span class="token keyword">extends</span>            <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> TokenStore tokenStore<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>ResourceServerSecurityConfigurer resources<span class="token punctuation">)</span><span class="token punctuation">{</span>            resources<span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span>RESOURCE_ID<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stateless</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/uaa/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span>  订单服务     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@EnableResourceServer</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServerConfig</span> <span class="token keyword">extends</span>        <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Autowired</span>            <span class="token keyword">private</span> TokenStore tokenStore<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>ResourceServerSecurityConfigurer resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resources<span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span>RESOURCE_ID<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stateless</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            http                    <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/order/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"#oauth2.hasScope('ROLE_API')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面定义了两个微服务的资源，其中：</p><p>UAAServerConfig指定了若请求匹配/ uaa / **网关不进行拦截。</p><p>OrderServerConfig指定了若请求请求匹配/ order / **，也就是访问统一用户服务，接收客户端需要有范围中包含读取，并且权限（权限）中需要包含ROLE_USER。</p><p>由于res1这个收件人客户端，已读取包括ROLE_ADMIN，ROLE_USER，ROLE_API三个权限。</p><p>1.3.4安全配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-3。转发明文token给微服务"><a href="#1-3。转发明文token给微服务" class="headerlink" title="1.3。转发明文token给微服务"></a>1.3。转发明文token给微服务</h3><p>通过Zuul过滤器的方式实现，目的是让下游微服务能够很方便的获取到当前的登录用户信息（明文token）</p><p><strong>（1）实现Zuul初步过滤器，完成当前登录用户信息提取，并加入转发微服务的request中</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * token传递拦截 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"pre"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.获取令牌内容         */</span>        RequestContext ctx <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Authentication authentication <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>authentication <span class="token keyword">instanceof</span> <span class="token class-name">OAuth2Authentication</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 无token访问网关内资源的情况，目前仅有uua服务直接暴露</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        OAuth2Authentication oauth2Authentication  <span class="token operator">=</span> <span class="token punctuation">(</span>OAuth2Authentication<span class="token punctuation">)</span>authentication<span class="token punctuation">;</span>        Authentication userAuthentication <span class="token operator">=</span> oauth2Authentication<span class="token punctuation">.</span><span class="token function">getUserAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object principal <span class="token operator">=</span> userAuthentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 2.组装明文token，转发给微服务，放入header，名称为json-token         */</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userAuthentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span>authorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>GrantedAuthority<span class="token punctuation">)</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OAuth2Request oAuth2Request <span class="token operator">=</span> oauth2Authentication<span class="token punctuation">.</span><span class="token function">getOAuth2Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> requestParameters <span class="token operator">=</span> oAuth2Request<span class="token punctuation">.</span><span class="token function">getRequestParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> jsonToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requestParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userAuthentication <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            jsonToken<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"principal"</span><span class="token punctuation">,</span>userAuthentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jsonToken<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"authorities"</span><span class="token punctuation">,</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span><span class="token function">addZuulRequestHeader</span><span class="token punctuation">(</span><span class="token string">"json-token"</span><span class="token punctuation">,</span> EncryptUtil<span class="token punctuation">.</span><span class="token function">encodeUTF8StringBase64</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>（2）将过滤器分为弹簧容器：</strong></p><p>配置AuthFilter</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pbteach<span class="token punctuation">.</span>security<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>AuthFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> AuthFilter <span class="token function">preFileter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CorsConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>18000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        CorsFilter corsFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>corsFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4。微服务用户鉴权拦截"><a href="#1-4。微服务用户鉴权拦截" class="headerlink" title="1.4。微服务用户鉴权拦截"></a>1.4。微服务用户鉴权拦截</h3><p>当微服务收到明文令牌时，应该怎么鉴权拦截呢？自己实现一个过滤器？自己解析明文令牌，自己定义一套资源访问策略？</p><p>不能适应Spring Security呢，是不是突然想起了前面我们实现的Spring Security基于令牌认证示例。咱们还拿到统一用户服务作为网关下游微服务，对它进行改造，增加<strong>微服务用户鉴权拦截</strong>功能。</p><p><strong>（1）增加测试资源</strong></p><p>OrderController增加以下端点</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('p1')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/r1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">r1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserDTO user <span class="token operator">=</span> <span class="token punctuation">(</span>UserDTO<span class="token punctuation">)</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"访问资源1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('p2')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/r2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">r2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通过Spring Security API获取当前登录用户</span>        UserDTO user <span class="token operator">=</span> <span class="token punctuation">(</span>UserDTO<span class="token punctuation">)</span>SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"访问资源2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>（2）Spring Security配置</strong></p><p>开启方法保护，并增加Spring配置策略，此外/登录方法不受保护（统一认证要调用），其他资源全部需要认证才能访问。</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"#oauth2.hasScope('ROLE_ADMIN')"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span>SessionCreationPolicy<span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>综合上面的配置，咱们共定义了三个资源了，拥有p1权限可以访问r1资源，拥有p2权限可以访问r2资源，只要认证通过就可以访问r3资源。</p><p>（3）定义过滤拦截令牌，并形成Spring Security的认证对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String token <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"json-token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.解析token</span>            String json <span class="token operator">=</span> EncryptUtil<span class="token punctuation">.</span><span class="token function">decodeUTF8StringBase64</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            JSONObject userJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>            UserDTO user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userJson<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"principal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JSONArray authoritiesArray <span class="token operator">=</span> userJson<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"authorities"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String  <span class="token punctuation">[</span><span class="token punctuation">]</span> authorities <span class="token operator">=</span> authoritiesArray<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>authoritiesArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.新建并填充authentication</span>            UsernamePasswordAuthenticationToken authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>                    user<span class="token punctuation">,</span> null<span class="token punctuation">,</span> AuthorityUtils<span class="token punctuation">.</span><span class="token function">createAuthorityList</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>                    httpServletRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.将authentication保存进安全上下文</span>            SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>httpServletRequest<span class="token punctuation">,</span> httpServletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>经过上边的过虑器，资源服务中就可以方便到的获取用户的身份信息：</p><pre><code>UserDTO user = (UserDTO) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</code></pre><p>还是三个步骤：</p><p>1.解析令牌</p><p>2.新建并填充认证</p><p>3.将身份验证保存进安全</p><p>剩下的事儿就交给Spring Security好了。</p><h3 id="1-5。集成测试"><a href="#1-5。集成测试" class="headerlink" title="1.5。集成测试"></a>1.5。集成测试</h3><p>本案例测试过程描述：</p><p>1，采用OAuth2.0的密码模式从UAA获取令牌</p><p>2，使用该令牌通过网关访问订单服务的测试资源</p><p>（1）<strong>过网关</strong>访问uaa的授权及获取令牌，获取令牌。注意端口是53010，网关的端口。</p><p>如授权端点：</p><pre><code>http://localhost:53010/uaa/oauth/authorize?response_type=code&amp;client_id=c1</code></pre><p>令牌端点</p><pre><code>http://localhost:53010/uaa/oauth/token</code></pre><p>（2）使用令牌过网关访问订单服务中的r1-r2测试资源进行测试。</p><p>结果：</p><p>使用张三token访问p1，访问成功</p><p>使用张三token访问p2，访问失败</p><p>使用李四token访问p1，访问失败</p><p>使用李四token访问p2，访问成功</p><p>符合预期结果。</p><p>（3）破坏令牌测试</p><p>无令牌测试返回内容：</p><pre><code>{    "error": "unauthorized",    "error_description": "Full authentication is required to access this resource"}</code></pre><p>破坏令牌测试返回内容：</p><pre><code>{    "error": "invalid_token",    "error_description": "Cannot convert access token to JSON"}</code></pre><h3 id="1-6扩展用户信息"><a href="#1-6扩展用户信息" class="headerlink" title="1.6扩展用户信息"></a>1.6扩展用户信息</h3><p>1.6.1需求分析</p><p>目前jwt令牌存储了用户的身份信息，权限信息，网关将向令牌明文化转发给微服务使用，当前用户身份信息仅包括了用户的账号，微服务还需要用户的ID，手机号等重要信息。</p><p>因此，本案例将提供扩展的用户信息的思路和方法，以满足微服务使用用户信息的需求。</p><p>下边分析JWT令牌中扩展用户信息的方案：</p><p>通过JWT令牌中用户身份信息更改用户详细信息，用户详细信息中唯一定义了用户名为用户的身份信息，此处有两个思路：第一是可以扩展UserDetails，使之包括更多的自定义属性，第二也可以扩展username的内容，存储到json数据内容作为用户名的内容。相比较而言，方案二比较简单还不用破坏UserDetails的结构，我们采用方案二。</p><p>1.6.2修改UserDetailService</p><p>从数据库查询到用户，将整体用户转成json存入userDetails对象。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//登录账号</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username="</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据账号去数据库查询...</span>    UserDto user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询用户权限</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissions <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findPermissionsByUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> perarray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>permissions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    permissions<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>perarray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建userDetails</span>    <span class="token comment" spellcheck="true">//这里将user转为json，将整体user存入userDetails</span>    String principal <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserDetails userDetails <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span>perarray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.6.3修改资源服务过虑器</p><p>资源服务中的过虑器负责从头中解析json-token，从中即可拿网关放入的用户身份信息，部分关键代码如下：</p><pre><code>...if (token != null){    //1.解析token    String json = EncryptUtil.decodeUTF8StringBase64(token);    JSONObject userJson = JSON.parseObject(json);    //取出用户身份信息    String principal = userJson.getString("principal");    //将json转成对象    UserDTO userDTO = JSON.parseObject(principal, UserDTO.class);    JSONArray authoritiesArray = userJson.getJSONArray("authorities");    ...</code></pre><p>以上过程就完成自定义用户身份信息的方案。</p><h2 id="2深入学习"><a href="#2深入学习" class="headerlink" title="2深入学习"></a>2深入学习</h2><p>配套代码：<a href="https://github.com/pbteach/SpringSecurity" target="_blank" rel="noopener">https</a> : <a href="https://github.com/pbteach/SpringSecurity" target="_blank" rel="noopener">//github.com/pbteach/SpringSecurity</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
            <tag> 分布 </tag>
            
            <tag> 认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker详细笔记</title>
      <link href="/Docker%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
      <url>/Docker%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网 络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更 好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指 的虚拟化资源包括计算能力和资料存储。</p><p>在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用， 透明化底层物理硬件，从而最大化的利用物理硬件 对资源充分利用。</p><p>虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟 化、虚拟机等等。</p><h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推 出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 GitHub 上进行维护</p><p>Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改 应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。 随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程 序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用 系统资源。</p><p>（2）职责的逻辑分类</p><p>使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的 目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正 常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构 建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将 该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成 了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分 布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器 中运行多个应用程序 ）</p><p><img src="http://39.107.43.127:8600/ckEditorUploadImg/1579570524513.jpg" alt="img"></p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本 地主机的操作系统，而传统方式则是在硬件层面实现 。</p><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018559450.png" alt="1578018559450"></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服 务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你 可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机 上的远程Docker守护进程。</p><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018592354.png" alt="1578018592354"></p><h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。 Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启 动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而 容器则是启动或者执行阶段。 容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要 的软件或者服务。</p><p>所以Docker容器就是：</p><p>一个镜像格式；</p><p>一些列标准操作；</p><p>一个执行环境。</p><p>Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯 一不同的是：集装箱运输货物，而Docker运输软件。</p><p>和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据 库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到 一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替 换，可以叠加，易于分发，并且尽量通用。</p><h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做 Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢， 可以自己构建私有的Registry）。 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最 先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在 CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更 新。</p><p>请直接挂载课程配套的Centos7.x镜像</p><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018712324.png" alt="1578018712324"></p><h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度 很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><pre><code>vi /etc/docker/daemon.json</code></pre><p>在该文件中输入如下内容：</p><pre><code>{ "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]}</code></pre><h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p>systemctl命令是系统服务管理器指令，如下：</p><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018794908.png" alt="1578018794908"></p><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018818785.png" alt="1578018818785"></p><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><pre><code>docker images</code></pre><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><pre><code>docker search 镜像名称</code></pre><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><pre><code>docker pull 镜像名称</code></pre><p>例如，我要下载centos7镜像</p><pre><code>docker pull centos:7</code></pre><h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p><pre><code>docker rmi 镜像ID</code></pre><p>删除所有镜像</p><pre><code>docker rmi `docker images -q</code></pre><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578018979886.png" alt="1578018979886"></p><h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p>-i：表示运行容器</p><p>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p>–name :为创建的容器命名。</p><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文 件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p>-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><pre><code>docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code></pre><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态</p><p>退出当前容器</p><pre><code>exit</code></pre><p>（2）守护式方式创建容器：</p><pre><code>docker run -di --name=容器名称 镜像名称:标签</code></pre><p>登录守护式容器方式：</p><pre><code>docker exec -it 容器名称 (或者容器ID) /bin/bash</code></pre><h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578019094212.png" alt="1578019094212"></p><h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578019114938.png" alt="1578019114938"></p><h3 id="3-2-5-目录挂载"><a href="#3-2-5-目录挂载" class="headerlink" title="3.2.5 目录挂载"></a>3.2.5 目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录 的文件从而去影响容器。 创建容器 添加-v参数 后边为 宿主机目录:容器目录，例如：</p><pre><code>docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</code></pre><p>如果你共享的是多级的目录，可能会出现权限不足的提示。 这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数 –privileged=true 来解决挂载的目录没 有权限的问题</p><h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><pre><code>docker inspect 容器名称（容器ID）</code></pre><p>也可以直接执行下面的命令直接输出IP地址</p><pre><code>docker inspect --format='{{.NetworkSettings.IPAddress}}' 容器名称（容器ID） </code></pre><h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p><pre><code>docker rm 容器名称（容器ID） </code></pre><h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p><pre><code>docker pull centos/mysql-57-centos7</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql </code></pre><p>-p 代表端口映射，格式为 宿主机映射端口:容器运行端口 -e 代表添加环境变量 MYSQL_ROOT_PASSWORD 是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP ,指定端口为33306</p><h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p><pre><code>docker pull tomcat:7-jre7</code></pre><p>（2）创建容器</p><p>创建容器 -p表示地址映射</p><pre><code>docker run -di --name=mytomcat -p 9000:8080-v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7 </code></pre><h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像</p><pre><code>docker pull nginx</code></pre><p>（2）创建Nginx容器</p><pre><code>docker run -di --name=mynginx -p 80:80 nginx </code></pre><h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p><pre><code>docker pull redis</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=myredis -p 6379:6379 redis </code></pre><h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><pre><code>docker commit mynginx mynginx_i</code></pre><h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><pre><code>docker save -o mynginx.tar mynginx_i </code></pre><h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像 然后执行此命令进行恢复</p><pre><code>docker load -i mynginx.tar</code></pre><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6 Dockerfile"></a>6 Dockerfile</h1><h2 id="6-1-什么是Dockerfile"><a href="#6-1-什么是Dockerfile" class="headerlink" title="6.1 什么是Dockerfile"></a>6.1 什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。 1、对于开发人员：可以为开发团队提供一个完全一致的开发环境； 2、对于测试人员：可以直接拿开发时所构建 的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了； 3、对于运维人员：在部署时，可以实现应用的无 缝移植。</p><h2 id="6-2-常用命令"><a href="#6-2-常用命令" class="headerlink" title="6.2 常用命令"></a>6.2 常用命令</h2><p><img src="http://www.pbteach.com/article/devtools/docker_quickstart01/1578019411942.png" alt="1578019411942"></p><h2 id="6-3-使用脚本创建镜像"><a href="#6-3-使用脚本创建镜像" class="headerlink" title="6.3 使用脚本创建镜像"></a>6.3 使用脚本创建镜像</h2><p>步骤： （1）创建目录</p><pre><code>mkdir –p /usr/local/dockerjdk8</code></pre><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile vi Dockerfile</p><pre><code>#依赖镜像名称和IDFROM centos:7#指定镜像创建者信息MAINTAINER PBTEACH#切换工作目录WORKDIR /usrRUN mkdir /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH</code></pre><p>（4）执行命令构建镜像</p><pre><code>docker build -t='jdk1.8' .</code></pre><p>注意后边的空格和点，不要省略 （5）查看镜像是否建立完成</p><pre><code>docker images </code></pre><h1 id="7-Docker私有仓库"><a href="#7-Docker私有仓库" class="headerlink" title="7 Docker私有仓库"></a>7 Docker私有仓库</h1><h2 id="7-1-私有仓库搭建与配置"><a href="#7-1-私有仓库搭建与配置" class="headerlink" title="7.1 私有仓库搭建与配置"></a>7.1 私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><pre><code>docker pull registry</code></pre><p>（2）启动私有仓库容器</p><pre><code>docker run -di --name=registry -p 5000:5000 registry</code></pre><p>（3）打开浏览器 输入地址<a href="http://192.168.101.64:5000/v2/_catalog%E7%9C%8B%E5%88%B0" target="_blank" rel="noopener">http://192.168.101.64:5000/v2/_catalog看到</a> {“repositories”:[]} 表示私有仓库 搭建成功并且内容为空</p><p>（4）修改daemon.json</p><pre><code>vi /etc/docker/daemon.json</code></pre><p>添加内容，保存退出。</p><pre><code>{"insecure-registries":["192.168.101.64:5000"]} </code></pre><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><pre><code>systemctl restart docker </code></pre><h2 id="7-2-镜像上传至私有仓库"><a href="#7-2-镜像上传至私有仓库" class="headerlink" title="7.2 镜像上传至私有仓库"></a>7.2 镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><pre><code>docker tag jdk1.8 192.168.101.64:5000/jdk1.8</code></pre><p>（2）再次启动私服容器</p><pre><code>docker start registry</code></pre><p>（3）上传标记的镜像</p><pre><code>docker push 192.168.101.64:5000/jdk1.8 </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等待唤醒机制、线程池、Lambda表达式</title>
      <link href="/%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>一、等待唤醒机制</p><p>​        等待唤醒机制，可以完成线程间的通信。</p><p>​        相关的API（这些方法都是Object中， 而不是Thread中的）</p><p>​        void wait()：让线程等待。　直到有其他线程调用notify或者notifyAll唤醒这个线程.</p><p>​        void wait(long timeout)：让线程等待。　直到有其他线程调用notify或者notifyAll唤醒 这个线程.或者等待时间已到也会自己醒</p><p>​        void notify()：唤醒一个线程</p><p>​        void notifyAll()： 唤醒所有线程</p><p>​    上面的方法虽然都是Object中的方法，但是并不能直接通过对象去调用。</p><p>​    这些方法要放在同步代码块中，并且使用锁对象去调用。</p><p>​    notify方法唤醒的是当前同步代码块中等待的线程（通过哪个锁对象调用的notify，那么唤醒的就是哪个同步代码块中的线程）</p><p>​    当线程调用wait方法后，会释放掉锁对象。</p><p>​    wait和sleep的区别：</p><p>​        wait会释放锁</p><p>​        sleep不会释放锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    包子铺    包子铺执行的任务是生产包子*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoZiPu</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为要保证让包子铺和吃货用的是同一个包子，那么我们可以让这个包子从外界传递过来</span>    <span class="token comment" spellcheck="true">//如果从外界给包子铺和吃货传递同一个包子，那么他们用的就是同一个包子了</span>    <span class="token keyword">private</span> BaoZi baoZi<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供构造方法，用来让外界传递BaoZi对象，给对应的成员变量赋值</span>    <span class="token keyword">public</span> <span class="token function">BaoZiPu</span><span class="token punctuation">(</span>BaoZi baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baoZi <span class="token operator">=</span> baoZi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//run方法中是线程要执行的任务，此时线程要执行的任务是生产包子</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//包子铺要无限次的生产包子，所以可以使用死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为wait和notify要写在同步代码块中，所以定义同步代码块</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//因为吃货和包子铺用的是同一个包子对象，那么可以把包子对象当做锁</span>                <span class="token comment" spellcheck="true">//如果此时有包子， 包子铺就不会生产， 会等着吃货去吃包子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//等待，让吃货吃包子。 wait方法一定要通过锁对象去调用</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        baoZi<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果没有包子，那么就要生产包子</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包子铺生产了一个包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把包子的flag改成true表示包子已经存在了</span>                baoZi<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                baoZi<span class="token punctuation">.</span>xianer <span class="token operator">=</span> <span class="token string">"五仁"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知吃货吃包子</span>                baoZi<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//唤醒吃货吃包子</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    包子铺    包子铺执行的任务是生产包子*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaoZiPu</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为要保证让包子铺和吃货用的是同一个包子，那么我们可以让这个包子从外界传递过来</span>    <span class="token comment" spellcheck="true">//如果从外界给包子铺和吃货传递同一个包子，那么他们用的就是同一个包子了</span>    <span class="token keyword">private</span> BaoZi baoZi<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供构造方法，用来让外界传递BaoZi对象，给对应的成员变量赋值</span>    <span class="token keyword">public</span> <span class="token function">BaoZiPu</span><span class="token punctuation">(</span>BaoZi baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baoZi <span class="token operator">=</span> baoZi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//run方法中是线程要执行的任务，此时线程要执行的任务是生产包子</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//包子铺要无限次的生产包子，所以可以使用死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为wait和notify要写在同步代码块中，所以定义同步代码块</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//因为吃货和包子铺用的是同一个包子对象，那么可以把包子对象当做锁</span>                <span class="token comment" spellcheck="true">//如果此时有包子， 包子铺就不会生产， 会等着吃货去吃包子</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//等待，让吃货吃包子。 wait方法一定要通过锁对象去调用</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        baoZi<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果没有包子，那么就要生产包子</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包子铺生产了一个包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把包子的flag改成true表示包子已经存在了</span>                baoZi<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                baoZi<span class="token punctuation">.</span>xianer <span class="token operator">=</span> <span class="token string">"五仁"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知吃货吃包子</span>                baoZi<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//唤醒吃货吃包子</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    吃货    吃货要执行的任务是吃包子。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChiHuo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为吃货和包子铺用的必须是同一个包子对象，所以可以定义一个成员变量，然后从外界传递一个包子对象赋值给这个成员变量</span>    <span class="token keyword">private</span> BaoZi baoZi<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ChiHuo</span><span class="token punctuation">(</span>BaoZi baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baoZi <span class="token operator">=</span> baoZi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在run方法中要定义线程执行的任务，线程要执行的任务是一直吃包子。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为吃货要不停的吃包子，所以可以使用死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为wait和notify要在同步代码块中调用，所以写同步代码块</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>baoZi<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//锁对象是包子，因为两个线程公用同一个包子</span>                <span class="token comment" spellcheck="true">//如果没有包子， 吃货应该等待</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>baoZi<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//让该线程等待，wait方法要通过锁对象去调用</span>                        baoZi<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果有包子，吃货应该吃包子</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃货吃了一个包子，"</span> <span class="token operator">+</span> baoZi<span class="token punctuation">.</span>xianer <span class="token operator">+</span> <span class="token string">"的包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                baoZi<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通知包子铺去生成包子</span>                baoZi<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//唤醒包子铺线程</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>demo01<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个包子对象</span>        BaoZi baoZi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoZi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建包子铺</span>        BaoZiPu baoZiPu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoZiPu</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建吃货</span>        ChiHuo chiHuo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiHuo</span><span class="token punctuation">(</span>baoZi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建两个线程一个执行包子铺的任务，一个执行吃货的任务</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>baoZiPu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>chiHuo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  二、线程池</p><p>线程池：线程池就是一个容器，里面存放了很多线程，并且这些线程具有复用性，可以多次的执行任务。</p><p>​    线程池相关API：</p><p>​        Executor： 线程池的顶层接口。 可以去执行线程任务。</p><p>​        ExecutorService： Executor的子接口， 可以去执行任务，以及对线程进行管理。</p><p>​        Executors： 操作线程池的工具类。 这个工具类中有一些方法可以获取到线程池对象。 （线程池对象不是我们new出来的，而是通过Executors工具类获取到的）</p><p>​    Executors 工具类中获取线程池的方法：</p><p>​        static ExecutorService newFixedThreadPool(int nThreads)： 获取一个线程池对象，参数nThreads为线程池中线程的数量。</p><p>​    如果要使用线程池执行任务，可以调用ExecutorService中的submit</p><p>​        submit(Runnable task)： 参数要传递Runnable接口的实现类，表示线程要执行的任务</p><p>​    线程池的使用步骤：</p><p>​        \1. 通过线程池工具类获取一个线程池对象。</p><p>​        \2. 定义Runnable接口的实现类，定义线程池要执行的任务。</p><p>​        \3. 调用线程池的submit方法，提交(执行)任务</p><p>​        \4. 销毁线程池（一般不做）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>demo02<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnableImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打印100行HelloWorld</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在打印HelloWorld:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取一个线程池对象</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2表示线程池中有两个线程</span>        <span class="token comment" spellcheck="true">//让线程池去执行任务。</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//销毁线程池</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>三、Lambda表达式</p><p>  1、 Lambda 表达式是匿名内部类的简化写法。</p><p>​    Lambda 标准格式：</p><p>​        (参数类型 参数名) -&gt; {</p><p>​            方法体;</p><p>​            return 返回值;</p><p>​        }</p><p>​    省略规则：</p><p>​        \1. 小括号中参数类型可以省略</p><p>​        \2. 小括号中只有一个参数，小括号可以省略</p><p>​        \3. 大括号中只有一条语句，可以省略大括号,return, 分号</p><p>​    Lambda表达式使用前提：</p><p>​        \1. 必须要有接口（不能是抽象类）， 并且接口中有且仅有一个需要被重写的抽象方法。 (函数式接口)</p><p>​        \2. 必须支持上下文推导。 必须有接口作为参数，或者使用一个接口类型的变量接收一下Lambda表达式</p><p>​    Lambda表达式是匿名内部类的简化写法，能不能和匿名内部类无条件替换？？ 不可以。</p><p>​    Lambda表达式能做的，匿名内部类一定能做。 匿名内部类能做的Lambda不一定能做。</p><p>​    \1. 匿名内部类可以是接口，也可以是抽象类，也可以是普通父类。 但是Lambda表达式必须是接口。</p><p>​    \2. 匿名内部类重写的方法可以是多个。 但是Lambda表达式要求接口中必须只有一个需要被重写的抽象方法。</p><p>​    Lambda表达式和匿名内部类原理完全不同。</p><p>​    不同的地方在于他们内部使用的字节码指令完全不同。</p><p>​    所以Lambda表达式并不是匿名内部类的语法糖。</p><p>​    Lambda表达式使用的字节码指令：invokedynamic    动态的字节码执行。</p><p>​    其他的像匿名内部类创建对象用的都是其他的静态字节码执行： invokeinterface, invokestatic ….</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08Lambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用MyInterface接收Lambda表达式，说明这个Lambda表示的是MyInterface接口中的抽象方法的内容.</span>        <span class="token comment" spellcheck="true">/*        MyInterface m = (int a) -> {            System.out.println(a);        };        */</span>        <span class="token comment" spellcheck="true">//把Lambda表达式当做参数</span>        <span class="token comment" spellcheck="true">//invokeMethod参数是一个MyInterface接口， 此时传递的Lambda表达式就可以推倒出来， 表示的是这个接口中的抽象方法的内容.</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span>MyInterface m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、 Lambda省略格式</p><p>​    Lambda标准格式写法：</p><p>​        (参数类型 参数名) -&gt; {</p><p>​            方法体;</p><p>​            return 返回值;</p><p>​        }</p><p>​    \1. 小括号中的参数类型可以省略</p><p>​    \2. 如果小括号中只有一个参数，那么可以省略小括号</p><p>​    \3. 如果大括号中只有一条语句，那么无论这个方法有没有返回值，都可以省略大括号， return， 分号.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06SimpleLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//匿名内部类</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用Lambda表达式标准格式</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小括号中的参数类型可以省略</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果小括号中只有一个参数，那么可以省略小括号</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果大括号中只有一条语句，那么可以省略大括号，return，以及分号.</span>        <span class="token function">invokeMethod</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span>MyInterface m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、 Lambda表达式有参有返回值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05LambdaTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        调用invokeCalc，传递Lambda表达式，求10和20相加之后的结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        定义方法传递Calculator接口对象，并且在方法中调用calc方法     */</span>                                <span class="token comment" spellcheck="true">// a = 10, b = 20 c = Lambda表达式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeCalc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> Calculator c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//calc方法会对a和b进行计算</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
            <tag> Lambda </tag>
            
            <tag> 等待唤醒机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github相关语法手册</title>
      <link href="/Github%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/"/>
      <url>/Github%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>git config <span class="token operator">-</span>l 查看全局用户信息配置<span class="token number">2</span><span class="token punctuation">.</span>git coonfig user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"liyuze"</span> 配置用户名<span class="token number">3</span><span class="token punctuation">.</span>git add Hello<span class="token punctuation">.</span>java 添加文件到暂存区<span class="token number">4</span><span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"注释语"</span> 添加文件到工作区<span class="token number">5</span><span class="token punctuation">.</span>git status 查看工作区文件状态``<span class="token number">6</span><span class="token punctuation">.</span>git log <span class="token operator">-</span>pretty<span class="token operator">=</span>online 版本格式显示<span class="token number">7</span><span class="token punctuation">.</span>git reset <span class="token operator">--</span>hard head<span class="token operator">~</span><span class="token number">1</span> 回退到上一个版本<span class="token number">8</span><span class="token punctuation">.</span>git reflog   显示可以穿梭的历史版本信息<span class="token punctuation">,</span>以及简写版本信息<span class="token number">9</span><span class="token punctuation">.</span>git reset <span class="token operator">--</span>hard  e9a40a4  回退到指定的版本<span class="token number">10</span><span class="token punctuation">.</span>git diff head Hello<span class="token punctuation">.</span>java 与前一个版本作比较<span class="token number">11</span><span class="token punctuation">.</span>git remote add origin url<span class="token punctuation">.</span><span class="token punctuation">.</span>  把github与本地仓库相关联<span class="token number">12</span><span class="token punctuation">.</span>git push <span class="token operator">-</span>u origin master 把本地内容推送到github上<span class="token number">13</span><span class="token punctuation">.</span>git remote <span class="token operator">-</span>v 查看远程服务器已经存在的版本<span class="token number">14</span><span class="token punctuation">.</span>git remote rm test 删除远程test仓库<span class="token number">15</span><span class="token punctuation">.</span>git commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token string">"一步提交操作"</span><span class="token number">16</span><span class="token punctuation">.</span>git clone url  克隆远程仓库<span class="token number">17</span><span class="token punctuation">.</span>git branch brh 创建一个分支<span class="token number">18</span><span class="token punctuation">.</span>git branch 查看分支<span class="token number">19</span><span class="token punctuation">.</span>git checkout brh 切换分支<span class="token number">20</span><span class="token punctuation">.</span>git branch <span class="token operator">-</span>d brh 删除分支<span class="token number">21</span><span class="token punctuation">.</span>git checkout <span class="token operator">-</span>b brh 创建并且切换分支<span class="token number">22</span><span class="token punctuation">.</span>git push origin brh 推送分支到远程仓库<span class="token punctuation">(</span>远程分支没有该本地分支，也没有关联<span class="token punctuation">)</span>  git push <span class="token operator">-</span>u origin<span class="token operator">/</span><span class="token function">bth</span><span class="token punctuation">(</span>推送并且关联<span class="token punctuation">)</span><span class="token number">23</span><span class="token punctuation">.</span>git push origin <span class="token operator">--</span>delete brh 删除远程分支<span class="token number">24</span><span class="token punctuation">.</span>git branch <span class="token operator">-</span>m brh newBrh 分支重命名<span class="token number">25</span><span class="token punctuation">.</span>git branch <span class="token operator">-</span>a<span class="token operator">/</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token operator">-</span>l  查看全部<span class="token operator">/</span>远程<span class="token operator">/</span>本地分支<span class="token number">26</span><span class="token punctuation">.</span>git branch <span class="token operator">-</span>D newBrh 删除分支<span class="token punctuation">(</span>分支还未合并，强制删除<span class="token punctuation">)</span><span class="token number">27</span><span class="token punctuation">.</span>git push origin <span class="token operator">--</span>delete newBrh <span class="token operator">/</span> git branch newBrh <span class="token operator">+</span>git push origin <span class="token operator">:</span>newBrh 推送空分支<span class="token number">28</span><span class="token punctuation">.</span>Git自动解决冲突与手动解决冲突<span class="token number">29</span><span class="token punctuation">.</span>git log <span class="token operator">--</span>graph <span class="token operator">--</span>pretty<span class="token operator">=</span>oneling  图形显示日志<span class="token number">30</span><span class="token punctuation">.</span>【本地<span class="token operator">--</span><span class="token operator">></span>远程】意思：如有没有本地仓库使用第一种方法与远程仓库关联    如果有本地仓库，那么就是用第二种方法与远程仓库关联We recommend every repository include a README<span class="token punctuation">,</span> LICENSE<span class="token punctuation">,</span> and <span class="token punctuation">.</span>gitignore<span class="token punctuation">.</span>…or create a <span class="token keyword">new</span> <span class="token class-name">repository</span> on the command lineecho <span class="token string">"# gitdemo"</span> <span class="token operator">>></span> README<span class="token punctuation">.</span>mdgit initgit add README<span class="token punctuation">.</span>mdgit commit <span class="token operator">-</span>m <span class="token string">"first commit"</span>git remote add origin https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Ezuy<span class="token operator">-</span>Lee<span class="token operator">/</span>liyuze<span class="token operator">-</span>bloggit push <span class="token operator">-</span>u origin master…or push an existing repository from the command linegit remote add origin https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Ezuy<span class="token operator">-</span>Lee<span class="token operator">/</span>liyuze<span class="token operator">-</span>bloggit push <span class="token operator">-</span>u origin master…or <span class="token keyword">import</span> code from another repositoryYou can initialize <span class="token keyword">this</span> repository with code from a Subversion<span class="token punctuation">,</span> Mercurial<span class="token punctuation">,</span> or TFS project<span class="token punctuation">.</span>Import code<span class="token number">31</span><span class="token punctuation">.</span>怎么同步远程仓库到本地【远程<span class="token operator">--</span><span class="token operator">></span>本地】     ·远程分支先创建，如何使让其与本地进行关联，需要使用<span class="token operator">:</span>    git branch <span class="token operator">--</span>set<span class="token operator">-</span>upstream<span class="token operator">-</span>to <span class="token operator">=</span> origin<span class="token operator">/</span>liyuze     ·git fetch origin liuburu master<span class="token operator">:</span>temp    把远程分支上的liuburu分支抓取到本地的temp分支上    注意：此时liuburu分支上的数据并未同步到本地，需要    使用git merge origin<span class="token operator">/</span>liuburu 进行数据同步    ·git remote <span class="token operator">-</span>v 查看远程仓库     ·git fetch origin master 把远程仓库orgin的master分支下的代码下到本地的origin<span class="token operator">/</span>master分之下    ·git log <span class="token operator">-</span>p master<span class="token punctuation">.</span><span class="token punctuation">.</span>origin<span class="token operator">/</span>master 比较两个版本的差别    ·git merge origin<span class="token operator">/</span>master        ·git fetch orgin master<span class="token operator">:</span>temp    ·git diff temp    ·git merge temp     git pull origin <span class="token function">master</span><span class="token punctuation">(</span>相当于是从远程获取最新版本并merge到本地<span class="token punctuation">)</span>     git checkout <span class="token operator">-</span>b local<span class="token operator">-</span>branchname origin<span class="token operator">/</span>remote_branchname拉取远程分支上的代码到本地，并且切换到该分支<span class="token number">32</span><span class="token punctuation">.</span>推送分支到远程分支以及删除远程分支     git push origin <span class="token operator">--</span>delete lxh 删除远程分支     git branch lxh <span class="token operator">+</span> git push origin <span class="token operator">:</span>lyz推送空分支删除远程分支      git branch <span class="token operator">-</span>d <span class="token operator">|</span> <span class="token operator">-</span>D branchname 删除branchname分支     git branch <span class="token operator">-</span>m<span class="token operator">|</span>M oldbranch newbranch 重命名分支，M强制重命名<span class="token number">33</span><span class="token punctuation">.</span>暂存区的使用        git stash 暂存    git pop   回复使用并且删除暂存    git stash apply 暂存应用恢复    git stash drop 暂存删除<span class="token number">34</span><span class="token punctuation">.</span>标签的使用    git tag v1<span class="token number">.0</span> 为master定义标签    git tag v1<span class="token number">.2</span> commitID 未指定版本定义标签    git show v1<span class="token number">.2</span> 查看指定标签    git tag 查看所有标签    git tag <span class="token operator">-</span>a v1<span class="token number">.2</span> <span class="token operator">-</span>m <span class="token string">"this is my tag"</span> commitID添加注释    git tag <span class="token operator">-</span>d v1<span class="token number">.2</span> 删除本地标签    git push origin<span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span>v1<span class="token number">.2</span> 删除远程标签    git push origin v1<span class="token number">.2</span> 推送一个标签    git push origin <span class="token operator">-</span>tags 推送多个标签    git tag <span class="token operator">-</span>d v1<span class="token number">.2</span><span class="token number">35</span><span class="token punctuation">.</span>Git忽略规则# 此为注释 – 将被 Git 忽略<span class="token operator">*</span><span class="token punctuation">.</span>a       # 忽略所有 <span class="token punctuation">.</span>a 结尾的文件<span class="token operator">!</span>lib<span class="token punctuation">.</span>a    # 但 lib<span class="token punctuation">.</span>a 除外<span class="token operator">/</span>TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir<span class="token operator">/</span>TODObuild<span class="token operator">/</span>    # 忽略 build<span class="token operator">/</span> 目录下的所有文件doc<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>txt # 会忽略 doc<span class="token operator">/</span>notes<span class="token punctuation">.</span>txt 但不包括 doc<span class="token operator">/</span>server<span class="token operator">/</span>arch<span class="token punctuation">.</span>txt注意问题：但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是<span class="token punctuation">.</span>gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改<span class="token punctuation">.</span>gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：git rm <span class="token operator">-</span>r <span class="token operator">--</span>cached <span class="token punctuation">.</span>git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">'update .gitignore'</span><span class="token number">36</span><span class="token operator">:</span>多人开发场景（自动决定冲突、手动解决冲突）<span class="token number">1</span><span class="token punctuation">.</span>前提：老板创建好了远程仓库，并且含有readme<span class="token punctuation">.</span>md文件<span class="token punctuation">,</span>并且创建好了一个公共类型的配置文件config<span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>为了版本演示冲突<span class="token punctuation">)</span>注意：每一个开发者都应该遵循<span class="token operator">:</span>第一次：克隆<span class="token operator">-</span><span class="token operator">></span>增删改查<span class="token operator">-</span><span class="token operator">></span>提交  以后：拉取<span class="token operator">-</span><span class="token operator">></span>增删改查<span class="token operator">-</span><span class="token operator">></span>提交李雨泽：拉取远程项目<span class="token punctuation">,</span>创建分支coder_lbrhy并且进行，创建Liyuze<span class="token punctuation">.</span>java文件进行远程推送AAAA：拉取远程项目，切换到coder_lbrhy分支上，创建AAAA<span class="token punctuation">.</span>java文件并且进行远程推送​```</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下搭建JEE开发环境</title>
      <link href="/Ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAJEE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/Ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAJEE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>以我本机的安装环境为例进行说明，其中</p><ul><li>Ubuntu12.10 Desktop 64bit</li><li>JDK：1.7u9 64bit</li><li>Tomcat：7.0 64bit</li><li>Eclipse：Juno + STS（Spring Tool Suite）plugins + Subclipse 64bit</li><li>Maven：3.0.5 64bit</li></ul><p>上述软件均可以通过访问repository服务器获取（服务器正在建设中…）</p><h4 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h4><h5 id="1-安装JDK：sudo"><a href="#1-安装JDK：sudo" class="headerlink" title="1.安装JDK：sudo"></a>1.安装JDK：sudo</h5><p>cd /opt/java/<br>sudo cp ~/download/jdk-7u9-linux-x64.tar.gz .<br>sudo tar -xvf jdk-7u9-linux-x64.tar.gz</p><h5 id="2-设置环境变量："><a href="#2-设置环境变量：" class="headerlink" title="2.设置环境变量："></a>2.设置环境变量：</h5><p>打开bashrc， gedit ~/.bashrc，加入下面内容到文件最后：<br>export JAVA_HOME=/opt/java/jdk1.7.0_09<br>export JRE_HOME=${JAVA_HOME}/jre<br>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH<br>使环境变量生效，source ~/.bashrc</p><h5 id="3-配置jdk："><a href="#3-配置jdk：" class="headerlink" title="3. 配置jdk："></a>3. 配置jdk：</h5><p>sudo update-alternatives –install /usr/bin/java java /usr/java/ jdk1.7.0_71 /bin/java 300<br>sudo update-alternatives –install /usr/bin/javac javac / usr/java/ jdk1.7.0_71/bin/javac 300<br>sudo update-alternatives –install /usr/bin/jar jar / usr/java/ jdk1.7.0_71/bin/jar 300<br>sudo update-alternatives –install /usr/bin/javah javah / usr/java/ jdk1.7.0_71/bin/javah 300<br>sudo update-alternatives –install /usr/bin/javap javap / usr/java/ jdk1.7.0_71/bin/javap 300</p><h4 id="二、Eclipse-Plugin"><a href="#二、Eclipse-Plugin" class="headerlink" title="二、Eclipse+Plugin"></a>二、Eclipse+Plugin</h4><p>由于spring+maven已经成为j2ee开发事实上的标准，因此直接使用集成了STS（Spring toolkit suite)的eclipse Juno，大家拷贝后直接解压缩即可使用（同时也包含了m2e，svn等常用plugin）。</p><h5 id="4-解压缩eclipse"><a href="#4-解压缩eclipse" class="headerlink" title="4.解压缩eclipse"></a>4.解压缩eclipse</h5><p>cd /opt/java/<br>sudo cp ~/download/eclipse_full.tar.gz .<br>sudo tar -xvf eclipse_full.tar.gz</p><h5 id="5-配置快捷方式"><a href="#5-配置快捷方式" class="headerlink" title="5.配置快捷方式"></a>5.配置快捷方式</h5><p>cd /usr/share/applications<br>sudo gedit eclipse.desktop<br>加入下面的内容：<br>[Desktop Entry]<br>Version=1.0<br>Name=eclipse<br>Exec=/opt/java/eclipse/eclipse<br>Terminal=false<br>Icon=/opt/java/eclipse/icon.xpm<br>Type=Application<br>Categories=Development</p><h4 id="三、maven"><a href="#三、maven" class="headerlink" title="三、maven"></a>三、maven</h4><h5 id="6-安装maven"><a href="#6-安装maven" class="headerlink" title="6.安装maven"></a>6.安装maven</h5><p>cd /opt/java/<br>sudo cp ~/download/apache-maven-3.0.5-bin.tar.gz .<br>sudo tar -xvf apache-maven-3.0.5-bin.tar.gz<br>打开bashrc， gedit ~/.bashrc，加入下面内容到文件最后：<br>export M2_HOME=/opt/java/apache-maven-3.0.5<br>export M2=$M2_HOME/bin<br>export MAVEN_OPTS=“-Xms256m -Xmx512m”<br>export PATH=$M2:$PATH<br>然后，运行source ~/.bashrc<br>打开eclipse的首选项，在maven→installations添加刚安装的外部maven的location</p><p>7.本地仓库镜像的配置</p><p>修改 ~/.m2/settings.xml(如果不存在，则从maven的HOME目录的conf下拷贝过来)，加上下面这段话。</p><mirror>    <p><id>local_release_repository</id>    </p><p><mirrorof>*</mirrorof>    </p><p><name>local release repository</name>    </p><p><url><a href="http://192.168.0.154:8081/nexus/content/groups/public/" target="_blank" rel="noopener">http://192.168.0.154:8081/nexus/content/groups/public/</a></url>  </p></mirror><h5 id="8-配置maven的安装调试"><a href="#8-配置maven的安装调试" class="headerlink" title="8.配置maven的安装调试"></a>8.配置maven的安装调试</h5><p>可以参照官方的文档进行操作，<a href="http://docs.codehaus.org/display/JETTY/Debugging+with+the+Maven+Jetty+Plugin+inside+Eclipse" target="_blank" rel="noopener">http://docs.codehaus.org/display/JETTY/Debugging+with+the+Maven+Jetty+Plugin+inside+Eclipse</a></p><h4 id="四、Tomcat"><a href="#四、Tomcat" class="headerlink" title="四、Tomcat"></a>四、Tomcat</h4><p>这部分没什么特别注意的，解压缩直接启动start.sh即可，如果是多个tomcat实例，需要修改conf下的端口</p><h4 id="五、国际化插件"><a href="#五、国际化插件" class="headerlink" title="五、国际化插件"></a>五、国际化插件</h4><p>下载并解压附件中的jp.gr.java_conf.ussiy.app.propedit_5.3.3.zip文件，并覆盖至eclipse目录即可，或选择link方式安装。</p><p>六、M2E4WTP插件</p><p><a href="http://download.jboss.org/jbosstools/updates/m2eclipse-wtp/" target="_blank" rel="noopener">http://download.jboss.org/jbosstools/updates/m2eclipse-wtp/</a></p><p>export MAVEN_OPTS=”-Xms256m -Xmx512m”</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> JEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库设计规范</title>
      <link href="/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="1-规范背景与目的"><a href="#1-规范背景与目的" class="headerlink" title="1. 规范背景与目的"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p><h2 id="2-设计规范"><a href="#2-设计规范" class="headerlink" title="2. 设计规范"></a>2. 设计规范</h2><h3 id="2-1-数据库设计"><a href="#2-1-数据库设计" class="headerlink" title="2.1 数据库设计"></a>2.1 数据库设计</h3><p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低。</p><p>对于不满足【高危】和【强制】两个级别的设计，DBA会强制打回要求修改。</p><h3 id="2-1-1-库名"><a href="#2-1-1-库名" class="headerlink" title="2.1.1 库名"></a>2.1.1 库名</h3><ol><li>【强制】库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li><li>【强制】库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li><li>【强制】一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li><li>【强制】创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li></ol><h3 id="2-1-2-表结构"><a href="#2-1-2-表结构" class="headerlink" title="2.1.2 表结构"></a>2.1.2 表结构</h3><ol><li>【强制】表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li><li>【强制】表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li><li>【强制】创建表时必须显式指定字符集为utf8或utf8mb4。</li><li>【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li><li>【强制】建表必须有comment</li><li>【建议】建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment</code> (2)标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。</li><li>【建议】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li><li>【建议】表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li><li>【建议】建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li><li>【建议】反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li><li>【强制】中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li><li>【强制】对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li></ol><h3 id="2-1-3-列数据类型优化"><a href="#2-1-3-列数据类型优化" class="headerlink" title="2.1.3 列数据类型优化"></a>2.1.3 列数据类型优化</h3><ol><li>【建议】表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li><li>【建议】业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li><li>【建议】业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。<br>SQL：<code>select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);</code><br>PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li><li>【建议】不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li><li>【建议】不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li><li>【建议】存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li><li>【建议】文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24/3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li><li>【建议】时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li></ol><p>详细存储大小参加下图：</p><h3 id="2-1-4-索引设计"><a href="#2-1-4-索引设计" class="headerlink" title="2.1.4 索引设计"></a>2.1.4 索引设计</h3><ol><li>【强制】InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li><li>【建议】主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。</li><li>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li><li>【强制】单个索引中每个索引记录的长度不能超过64KB。</li><li>【建议】单个表上的索引个数不能超过7个。</li><li>【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li><li>【建议】在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li><li>【建议】建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li></ol><h3 id="2-1-5-分库分表、分区表"><a href="#2-1-5-分库分表、分区表" class="headerlink" title="2.1.5 分库分表、分区表"></a>2.1.5 分库分表、分区表</h3><ol><li>【强制】分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li><li>【强制】单个分区表中的分区（包括子分区）个数不能超过1024。</li><li>【强制】上线前RD或者DBA必须指定分区表的创建、清理策略。</li><li>【强制】访问分区表的SQL必须包含分区键。</li><li>【建议】单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li><li>【强制】对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li><li>【强制】采用分库策略的，库的数量不能超过1024</li><li>【强制】采用分表策略的，表的数量不能超过4096</li><li>【建议】单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li><li>【建议】水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li></ol><h3 id="2-1-6-字符集"><a href="#2-1-6-字符集" class="headerlink" title="2.1.6 字符集"></a>2.1.6 字符集</h3><ol><li>【强制】数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li><li>【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li></ol><h3 id="2-1-7-程序层DAO设计建议"><a href="#2-1-7-程序层DAO设计建议" class="headerlink" title="2.1.7 程序层DAO设计建议"></a>2.1.7 程序层DAO设计建议</h3><ol><li>【建议】新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li><li>【建议】前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li><li>【建议】前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li><li>【建议】对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li><li>【建议】对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li><li>【建议】在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li><li>【建议】多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li><li>【建议】业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li><li>【建议】对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li></ol><h3 id="2-1-8-一个规范的建表语句示例"><a href="#2-1-8-一个规范的建表语句示例" class="headerlink" title="2.1.8 一个规范的建表语句示例"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户id’ <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'真实姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户邮箱’<span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'昵称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>avatar<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'头像'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'生日'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>short_introduce<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'一句话介绍自己，最多50个汉字'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_resume<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户提交的简历存放地址'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_register_ip<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户注册时的源ip’<span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户记录创建的时间’<span class="token punctuation">,</span> <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户资料修改的时间’<span class="token punctuation">,</span> <span class="token punctuation">`</span>user_review_status<span class="token punctuation">`</span> <span class="token keyword">tinyint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> ‘用户资料审核状态，<span class="token number">1</span>为通过，<span class="token number">2</span>为审核中，<span class="token number">3</span>为未通过，<span class="token number">4</span>为还未提交审核’<span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_user_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_username<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_create_time<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>user_review_status<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'网站用户基本信息'</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-SQL编写"><a href="#2-2-SQL编写" class="headerlink" title="2.2 SQL编写"></a>2.2 SQL编写</h2><h3 id="2-2-1-DML语句"><a href="#2-2-1-DML语句" class="headerlink" title="2.2.1 DML语句"></a>2.2.1 DML语句</h3><ol><li>【强制】SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li><li>【强制】insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li><li>【建议】<code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li><li>【建议】SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li><li>【建议】in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li><li>【建议】事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li><li>【强制】事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li><li>【强制】写入和事务发往主库，只读SQL发往从库。</li><li>【强制】除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li><li>【强制】生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li><li>【强制】where条件里等号左右字段类型必须一致，否则无法利用索引。</li><li>【建议】<code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li><li>【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li><li>【强制】WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li><li>【建议】索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)='Admin'</code>或<code>where user_id+2=10023</code>。</li><li>【建议】减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li><li>【建议】分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li></ol><h3 id="2-2-2-多表连接"><a href="#2-2-2-多表连接" class="headerlink" title="2.2.2 多表连接"></a>2.2.2 多表连接</h3><ol><li>【强制】禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li><li>【强制】禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li><li>【建议】不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li><li>【建议】线上环境，多表join不要超过3个表。</li><li>【建议】多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li><li>【建议】在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li></ol><h3 id="2-2-3-事务"><a href="#2-2-3-事务" class="headerlink" title="2.2.3 事务"></a>2.2.3 事务</h3><ol><li>【建议】事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li><li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li><li>【建议】对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li><li>【强制】程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li><li>【建议】事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li><li>【建议】事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li><li>【建议】尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li><li>【建议】对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li></ol><h3 id="2-2-4-排序和分组"><a href="#2-2-4-排序和分组" class="headerlink" title="2.2.4 排序和分组"></a>2.2.4 排序和分组</h3><ol><li>【建议】减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li><li>【建议】<code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li><li>【建议】包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li></ol><h3 id="2-2-5-线上禁止使用的SQL语句"><a href="#2-2-5-线上禁止使用的SQL语句" class="headerlink" title="2.2.5 线上禁止使用的SQL语句"></a>2.2.5 线上禁止使用的SQL语句</h3><ol><li>【高危】禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li><li>【高危】禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li><li>【强制】禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li><li>【强制】禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li><li>【强制】禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> 设计规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理的代码分析</title>
      <link href="/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="一、代理模式简介"><a href="#一、代理模式简介" class="headerlink" title="一、代理模式简介"></a>一、代理模式简介</h4><p>​    代理模式是一种常用的设计模式。代理模式为其对象提供了一种代理以控制对这个对象的访问。代理模式可以将主要业务与次要业务进行松耦合的组装。根据代理类的创建时机和创建方式的不同，可以将其分为静态代理和动态代理两种形式：<br>在程序运行前就已经存在的编译好的代理类是为静态代理，<br>在程序运行期间根据需要动态创建代理类及其实例来完成具体的功能是为动态代理。</p><h4 id="二、静态代理"><a href="#二、静态代理" class="headerlink" title="二、静态代理"></a>二、静态代理</h4><p>​    静态代理是代理模式的实现方式之一，是相对于动态代理而言的。所谓静态代理是指，在程序运行前，由程序员创建或特定工具类自动生成源代码并对其编译生成.class文件。代理模式的介绍与静态代理的实现见博文：设计模式之代理模式</p><h4 id="三、动态代理"><a href="#三、动态代理" class="headerlink" title="三、动态代理"></a>三、动态代理</h4><p>动态代理简介<br>    对代理模式而言，一般来说，具体主题类与其代理类是一一对应的，这也是静态代理的特点。但是，也存在这样的情况：有N个主题类，但是代理类中的“预处理、后处理”都是相同的，仅仅是调用主题不同。那么，若采用静态代理，必然需要手动创建N个代理类，这显然让人相当不爽。动态代理则可以简单地为各个主题类分别生成代理类，共享“预处理，后处理”功能，这样可以大大减小程序规模，这也是动态代理的一大亮点。</p><p>在动态代理中，代理类是在运行时期生成的。因此，相比静态代理，动态代理可以很方便地对委托类的相关方法进行统一增强处理，如添加方法调用次数、添加日志功能等等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>IUser<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>liyuze<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 目标对象</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//user.eat("榴莲");</span>        <span class="token comment" spellcheck="true">// 使用动态代理的方式增强目标对象的eat方法</span>        <span class="token comment" spellcheck="true">// 动态代理：jdk的动态代理  cglib的动态代理</span>        <span class="token comment" spellcheck="true">// jdk的动态代理使用条件：1 被代理对象（目标对象）必须得有接口   2 必须得知道要代理的对象是谁</span>        <span class="token comment" spellcheck="true">// cglib的动态代理使用条件：被代理对象（目标对象）不需要有接口，只要知道被代理对象是谁即可</span>        <span class="token comment" spellcheck="true">// 扩：spring的aop底层就是：动态代理</span>                    <span class="token comment" spellcheck="true">// 1 如果被代理对象有接口 默认使用jdk的动态代理来增强 ----代理和被代理对象是兄弟关系</span>                   <span class="token comment" spellcheck="true">//  2 如果被代理对象没有接口 默认使用第三方cglib的动态代理来增强---代理和被代理对象是父子关系</span>        <span class="token comment" spellcheck="true">// jdk的动态代理</span>        <span class="token comment" spellcheck="true">// 参数一：和被代理对象一样的类加载器</span>        <span class="token comment" spellcheck="true">// 参数二：和被代理对象一样的接口 (现因为也要实 具有一样的接口方法)</span>        <span class="token comment" spellcheck="true">// 参数三：增强业务的实现类</span>        IUser userProxy <span class="token operator">=</span><span class="token punctuation">(</span>IUser<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>IUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token comment" spellcheck="true">// 参数1：代理对象 固定值</span>                    <span class="token comment" spellcheck="true">// 参数2: 要增强的方法</span>                    <span class="token comment" spellcheck="true">// 参数3: 要增强的方法在运行过程中需要的参数</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 对要增强的方法进行增强</span>                        <span class="token comment" spellcheck="true">// 方法之前增强</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在五星级大酒店中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//aop: aaa 前置通知--在eat方法之前增强</span>                        <span class="token comment" spellcheck="true">// 让原方法执行</span>                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 方法之后增强</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"骑自行车回家..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//aop: bbb 后置通知</span>                        <span class="token comment" spellcheck="true">// 谁调用返回给谁</span>                        <span class="token comment" spellcheck="true">// 特点：见到void就不返回了</span>                        <span class="token keyword">return</span> <span class="token string">"再见"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用代理对象调用方法</span>        String value<span class="token operator">=</span>userProxy<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"榴莲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要代理对象调用任何方法 invoke都会执行 执行的内容就是对调用方法（eat）的增强</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE基础-方法、运算符</title>
      <link href="/javaSE%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/javaSE%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、方法"><a href="#一、方法" class="headerlink" title="一、方法"></a>一、方法</h1><p>​    方法是完成特定功能的代码块。</p><p>​    很多语言中都有方法，方法也叫作函数， 只不过在java中一般叫做方法。</p><h2 id="1、方法的定义格式："><a href="#1、方法的定义格式：" class="headerlink" title="1、方法的定义格式："></a>1、方法的定义格式：</h2><p>​                修饰符 返回值类型 方法名(参数列表) {</p><p>​                方法体;</p><p>​               return 返回值;</p><p>​               }</p><p>​    格式解释：</p><p>​        修饰符： 目前固定 public static</p><p>​        返回值类型： 目前固定， 用void。</p><p>​        方法名： 就是我们自己给方法起的名字。 要满足标识符的规则以及规范。</p><p>​        参数列表： 可以省略。 目前省略。</p><p>​        方法体： 就是完成特定功能的代码块。</p><p>​        return 返回值： 方法调用完成之后的结果。 如果返回值类型是void，那么不能有返回值。所以说这一行可以省略。</p><p>​                               如果返回值类型是void，那么return 返回值 一般省略。</p><p>​                             如果不想省略， 那么只能单独写一个return， 不能再写后面的返回值。因为void表示没有返回值。</p><p>​    注意：方法只定义是不会执行的，必须调用才会执行。</p><p>​    方法的调用格式，对于返回值类型为void的方法，要使用以下格式调用：</p><p>​         方法名(实际参数列表);</p><p>​        如果在定义方法的时候，方法参数列表位置没有写东西，那么调用的时候小括号里面也什么都不写。</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Method</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main...start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用用printMethod方法，调用这个方法，这个方法才会执行</span>        <span class="token function">printMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main...end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你今天早上洗头发了吗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方法的注意事项。</p><p> \1. 方法和方法是平级关系，不能把一个方法定义在另一个方法里面</p><p> \2. 不能把一个方法定义在类的外面</p><p> 3.+= 的特殊作用。</p><p>​    m+=n：是先计算m和n相加的结果。 然后把结果赋值给左边的变量m。 运算结果相当于 m = m + n;</p><p>​    扩展的赋值运算符，比如+=， -=…..里面蕴含了强制类型转换的功能；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Ext</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//i += j;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j:"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        s1 <span class="token operator">+=</span> s2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//s1 = s1 + s2;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>常量优化机制， java编译器在编译时期， 对于常量的值是知道的。 所以编译时期会直接求出来常量运算的结果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Ext</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//byte b3 = 3 + 4;</span>        <span class="token keyword">byte</span> b3 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//java中整数类型在赋值的时候， 如果在这个类型范围内，是可以直接赋值的。</span>        <span class="token keyword">byte</span> b4 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// byte类型的变量相互运算会把自己提升为int，运算结果是int类型，不能赋值给byte</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b3:"</span> <span class="token operator">+</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b4:"</span> <span class="token operator">+</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java中的类型转换。"><a href="#Java中的类型转换。" class="headerlink" title="Java中的类型转换。"></a>Java中的类型转换。</h2><p> Java中的类型转换有两种，一种是自动类型转换，另一种是强制类型转换。</p><p>​    自动类型转换：</p><p>​        取值范围小的类型在需要的时候可以自动转成取值范围大的类型。</p><p>​        byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</p><p>​        注意：</p><p>​            \1. long虽然是8个字节，float是4个字节，但是long的取值范围没有float大。</p><p>​            \2. byte,short,char 他们之间不做转换。 只要这三个数据类型参与运算，都会先把自己提升为int类型。</p><p>​               比如两个byte类型的变量相加也会自动把自己提升为int然后再去运算。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01TypeCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//7</span>        <span class="token comment" spellcheck="true">//用一个变量接收a和b相加的结果，然后再打印</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//7</span>        <span class="token comment" spellcheck="true">//定义两个不同类型的变量</span>        <span class="token keyword">int</span> aa <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> bb <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aa <span class="token operator">+</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//7</span>        <span class="token comment" spellcheck="true">//用一个变量接收aa和bb相加之后的结果</span>        <span class="token comment" spellcheck="true">//byte cc = aa + bb;  不可以</span>        <span class="token keyword">int</span> cc <span class="token operator">=</span> aa <span class="token operator">+</span> bb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在java中，不同数据类型之间是不能直接运算的。 现在byte和int相加， 会把取值范围小的类型临时自动提升为取值范围大的类型，然后再去运算</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java中的强制类型转换"><a href="#Java中的强制类型转换" class="headerlink" title="Java中的强制类型转换"></a>Java中的强制类型转换</h2><p>​        强制类型转换：取值范围大的可以强转成取值范围小的。</p><p>​       强制类型转换系统不会帮我们去做，我们需要使用格式去实现。</p><p>​            格式：</p><p>​              目标数据类型 变量名 = (目标数据类型)要强转的数据;</p><p>​               强制类型转换是不推荐， 因为会损失精度</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02TypeCase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义两个不同数据类型的变量</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//byte c = a + b;</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 304  1 0011 0000    ->   0011 0000</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="运算符就是用来对数据进行计算的符号"><a href="#运算符就是用来对数据进行计算的符号" class="headerlink" title="运算符就是用来对数据进行计算的符号"></a>运算符就是用来对数据进行计算的符号</h3><p>​    算数运算符： + - * / % ++ –</p><p>​    +： 做加法</p><p>​    -： 做减法</p><p>​    *： 做乘法</p><p>​    /： 做除法。 如果两个整数相除，结果只取整数部分.如果想要得到小数部分， 只需要把除法两边任意一个改成小数即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Operator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义两个变量</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//做加法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 8</span>        <span class="token comment" spellcheck="true">//做减法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2</span>        <span class="token comment" spellcheck="true">//做乘法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span>        <span class="token comment" spellcheck="true">//做除法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>        <span class="token comment" spellcheck="true">//带有小数部分的结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot核心原理</title>
      <link href="/SpringBoot%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
      <url>/SpringBoot%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="一、什么是SpringBoot"><a href="#一、什么是SpringBoot" class="headerlink" title="一、什么是SpringBoot"></a>一、什么是SpringBoot</h4><p>​    SpringBoot是一个快速开发框架，快速的将一些常用的第三方依赖整合（原理：通过Maven子父工程的方式），简化XML配置，全部采用注解形式，内置Http服务器（Jetty和Tomcat），最终以java应用程序进行执行。</p><h4 id="二、SpringBoot核心原理"><a href="#二、SpringBoot核心原理" class="headerlink" title="二、SpringBoot核心原理"></a>二、SpringBoot核心原理</h4><p>（1） 基于SpringMVC无配置文件（纯Java）完全注解化+内置tomcat-embed-core实现SpringBoot框架，Main函数启动。<br>（2） SpringBoot核心快速整合第三方框架原理:Maven继承依赖关系。</p><h4 id="三、SpringBoot重点"><a href="#三、SpringBoot重点" class="headerlink" title="三、SpringBoot重点"></a>三、SpringBoot重点</h4><p>​    springboot 通过引用spring-boot-starter-web依赖，整合SpingMVC框架。只需要引用一个jar包，就可以通过Maven继承的方式引用到Spring-aop,Spring-beans,Spring-core,Spring-web等相关依赖。</p><h5 id="3-1-快速整合第三方依赖：maven子父依赖关系。"><a href="#3-1-快速整合第三方依赖：maven子父依赖关系。" class="headerlink" title="3.1:快速整合第三方依赖：maven子父依赖关系。"></a>3.1:快速整合第三方依赖：maven子父依赖关系。</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- SpringBoot 整合SpringMVC --></span> <span class="token comment" spellcheck="true">&lt;!-- 为什么我们映入spring-boot-starter-web 能够帮我整合Spring环境 原理通过Maven子父 工程 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h5 id="3-2：完全无配置文件（采用注解化）"><a href="#3-2：完全无配置文件（采用注解化）" class="headerlink" title="3.2：完全无配置文件（采用注解化）"></a>3.2：完全无配置文件（采用注解化）</h5><p>springboot没有配置文件，如何进行初始化？</p><p>在没有web.xml配置文件的情况，通过java代码操作整个SpringMVC的初始化过程，java代码最终会生成class文件,内置Tomcat就会加载这些class文件，当所有程序加载完成后，项目就可以访问了。</p><p>以前的web项目，通过Web.xml配置文件加载整个项目流程。<br><img src="en-resource://database/2452:1" alt="0886a6ec58053ab6a63370f46bba7057.png"><br><img src="en-resource://database/2454:1" alt="ba95bcabf3597032d1862226b2fa1377.png"><br>没有web.xml文件，那么Tomcat是如何启动（注解在什么时候产生）？</p><p>在Spring3.0以上（提供注解，在这个版本以后，有了巨大改变，完全不需要任何配置文件加载项目）。</p><p>SpringMVC内置注解加载整个SpringMVC容器。相当于使用Java代码编写SpringMVC初始化。<br>package com.springboot.config;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.ComponentScan;<br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.servlet.ViewResolver;<br>import org.springframework.web.servlet.config.annotation.EnableWebMvc;<br>import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;<br>import org.springframework.web.servlet.view.InternalResourceViewResolver;</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于微服务理解</title>
      <link href="/%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%A7%A3/"/>
      <url>/%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、微服务简介"><a href="#一、微服务简介" class="headerlink" title="一、微服务简介"></a>一、微服务简介</h1><p>微服务是最近的一两年的时间里是很火的一个概念。感觉不学习一下都快跟不上时代的步伐了，下边做一下简单的总结和介绍。何为微服务？简而言之，微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统的。其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务我们仅做最低限度的集中管理。一个微服务一般完成某个特定的功能，比如下单管理、客户管理等等。每一个微服务都是微型六角形应用，都有自己的业务逻辑和适配器。一些微服务还会发布API给其它微服务和应用客户端使用。其它微服务完成一个Web UI，运行时，每一个实例可能是一个云VM或者是Docker容器。总的来说，微服务的主旨是将一个原本独立的系统拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作，并且每个服务都维护着自身的数据存储、业务开发、自动化测试以及独立部署机制。</p><h1 id="二、微服务的特征"><a href="#二、微服务的特征" class="headerlink" title="二、微服务的特征"></a>二、微服务的特征</h1><p>1、每个微服务可独立运行在自己的进程里；<br>2、一系列独立运行的微服务共同构建起了整个系统；<br>3、每个服务为独立的业务开发，一个微服务一般完成某个特定的功能，比如：订单管理、用户管理等；<br>4、微服务之间通过一些轻量的通信机制进行通信，例如通过REST API或者RPC的方式进行调用。</p><h1 id="三、常见微服务框架"><a href="#三、常见微服务框架" class="headerlink" title="三、常见微服务框架"></a>三、常见微服务框架</h1><p>1、服务治理框架<br>（1）Dubbo（<a href="http://dubbo.io/）、Dubbox（当当网对Dubbo的扩展）" target="_blank" rel="noopener">http://dubbo.io/）、Dubbox（当当网对Dubbo的扩展）</a><br>（2）Netflix的Eureka、Apache的Consul等。Spring Cloud Eureka是对Netflix的Eureka的进一步封装。</p><p>2、分布式配置管理</p><p>（1）百度的Disconf<br><img src="en-resource://database/2868:1" alt="76caf7ad09af60c0d6c96561376156d7.png"></p><p>（2）360的QConf<br>（3）Spring Cloud组件中的Config<br>（4）淘宝的Diamond</p><p>3、批量任务框架<br>（1）Spring Cloud组件中的Task<br>（2）LTS</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS调用系统摄像头实现拍照功能</title>
      <link href="/JS%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E7%8E%B0%E6%8B%8D%E7%85%A7%E5%8A%9F%E8%83%BD/"/>
      <url>/JS%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E7%8E%B0%E6%8B%8D%E7%85%A7%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>模拟拍照<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>   <span class="token operator">&lt;</span>video id<span class="token operator">=</span><span class="token string">"video"</span> width<span class="token operator">=</span><span class="token string">"600"</span> height<span class="token operator">=</span><span class="token string">"500"</span><span class="token punctuation">;</span> margin<span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span> autoplay<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"snap"</span><span class="token operator">></span>点击拍照<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"canvas"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"500"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>          window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> aVideo<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> aCanvas<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx<span class="token operator">=</span>aCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        navigator<span class="token punctuation">.</span>getUserMedia  <span class="token operator">=</span> navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span>                          navigator<span class="token punctuation">.</span>webkitGetUserMedia <span class="token operator">||</span>                          navigator<span class="token punctuation">.</span>mozGetUserMedia <span class="token operator">||</span>                          navigator<span class="token punctuation">.</span>msGetUserMedia<span class="token punctuation">;</span>        navigator<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span>video<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> gotStream<span class="token punctuation">,</span> noStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">gotStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>            video<span class="token punctuation">.</span>src <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>            video<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              stream<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            stream<span class="token punctuation">.</span>onended <span class="token operator">=</span> noStream<span class="token punctuation">;</span>            video<span class="token punctuation">.</span>onloadedmetadata <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'摄像头成功打开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">noStream</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"snap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>aVideo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>aVideo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的软件安装笔记</title>
      <link href="/linux%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/linux%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>说明：该笔记是在linux上安装jdk,mysql,tomcat,redis软件，</p><p>​      以便于建立一个linux系统下的web环境</p><p>建议：保留该安装笔记 以便于复用</p><p>软件安装命令：rpm</p><p>作用：相当于软件助手，可以查询已安装的软件、卸载软件和安装软件。</p><p>安装：rpm -ivh 软件名</p><p>删除或卸载：rpm -e –nodeps 软件名</p><p>查看所有安装的软件：rpm -qa</p><p>安装准备：在/usr/local目录下创建jdk文件夹，mysql文件夹，tomcat文件夹，redis文件夹存放安装内容</p><h5 id="一-jdk安装"><a href="#一-jdk安装" class="headerlink" title="一 jdk安装"></a>一 jdk安装</h5><p>步骤1：查看当前Linux系统是否已经安装jdk</p><p>命令 rpm -qa | grep java</p><p>步骤2：将jdk压缩包放入/usr/local/jdk目录下</p><p>命令 mv jdk-8u181-linux-x64.tar.gz /usr/local/jdk</p><p>步骤3：进入 /usr/local/jdk目录下,解压jdk</p><p>命令 cd /usr/local/jdk</p><p>命令 tar -zxvf jdk-8u181-linux-x64.tar.gz</p><p>测试 java -version(不成功,得配置环境变量)</p><p>步骤4：配置环境变量</p><p>命令 vi /etc/profile</p><p>在文件的最后面添加如下代码 （最末尾两行） </p><p>export JAVA_HOME=/usr/local/jdk/jdk1.8.0_181</p><p>export PATH=$JAVA_HOME/bin:$PATH</p><p>ps:这个路径配置的是自己jdk解压之后的路径</p><p>步骤5：重新加载配置文件</p><p>命令 source /etc/profile</p><p>最终测试:</p><p>​    java version “1.8.0_181”</p><p>​    Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</p><p>​    Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</p><p>出现这个东西,证明安装全部成功</p><h5 id="二-tomcat安装"><a href="#二-tomcat安装" class="headerlink" title="二 tomcat安装"></a>二 tomcat安装</h5><p>步骤1：查看当前Linux系统是否已经安装tomcat</p><p>命令rpm -qa | grep tomcat</p><p>步骤2：将tomcat压缩包放入/usr/local/tomcat目录下</p><p>命令 mv apache-tomcat-8.5.27.tar.gz /usr/local/tomcat</p><p>步骤3：进入/usr/local/tomcat目录下,解压tomcat</p><p>命令 cd /usr/local/tomcat</p><p>命令 tar -zxvf apache-tomcat-8.5.27.tar.gz</p><p>步骤4: 进入/usr/local/tomcat/apache-tomcat-8.5.27/bin 启动tomcat</p><p>命令 ./startup.sh</p><p>测试: 通过浏览器访问8080端口(不成功,得配置8080端口开放)</p><p>步骤5: 修改防火墙的配置文件</p><p>命令 vi /etc/sysconfig/iptables</p><p>复制(yy)    </p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</p><p>粘贴(p)</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p><p>步骤6:重启防火墙服务                    </p><p>service iptables restart</p><h5 id="开放端口命令："><a href="#开放端口命令：" class="headerlink" title="开放端口命令："></a>开放端口命令：</h5><p>操作步骤：</p><p>1、登陆到linux系统</p><p>2、输入防火墙开放端口命令：firewall-cmd –zone=public –add-port=8080/tcp –permanent</p><p>3、刷新防火墙：firewall-cmd –reload</p><p>* 注意：–add-port=后面接需要开放的端口</p><p>-——————–</p><h5 id="三-mysql安装"><a href="#三-mysql安装" class="headerlink" title="三 mysql安装"></a>三 mysql安装</h5><p>步骤1：查看当前Linux系统是否已经安装mysql</p><p>命令 rpm -qa | grep mysql</p><p>虽然没有安装mysql,但是有自带的数据库：mariadb</p><p>步骤2：查看并卸载自带的数据库</p><p>查看命令 rpm -qa | grep mariadb</p><p>卸载命令 rpm -e –nodeps mariadb-libs-5.5.56-2.el7.x86_64</p><p>步骤3：将mysql压缩包放入/usr/local/mysql目录下,解压mysql</p><p>命令 mv MySQL-5.6.22-1.el6.i686.rpm-bundle.tar /usr/local/mysql</p><p>命令 tar -xvf MySQL-5.5.49-1.linux2.6.i386.rpm-bundle.tar</p><p>步骤4：先安装解压后的服务器端(MySQL-server-5.6.22-1.el6.i686.rpm)</p><p>命令 rpm -ivh MySQL-server-5.5.49-1.linux2.6.i386.rpm</p><p>ps：会缺依赖,安装mysql服务器端软件需要依赖如下(4个依赖包)</p><p>libaio.so.1</p><p>libc.so.6</p><p>libgcc_s.so.1(这个版本有冲突，需要先卸载再安装)</p><p>libstdc++.so.6（这个版本有冲突，需要先卸载在安装）</p><p>步骤5：安装依赖</p><p>命令 yum install libaio.so.1</p><p>命令 yum install libc.so.6</p><p>步骤6：先卸载 libgcc 再安装 libgcc</p><p>卸载命令</p><p>rpm -qa|grep libgcc</p><p>rpm -e –nodeps libgcc-4.8.5-28.el7_5.1.x86_64</p><p>安装命令</p><p>yum install libgcc_s.so.1</p><p>步骤7：先卸载libstdc++再安装libstdc++</p><p>卸载命令</p><p>rpm -qa|grep libstdc</p><p>rpm -e –nodeps libstdc++-devel-4.8.5-28.el7_5.1.x86_64</p><p>rpm -e –nodeps libstdc++-4.8.5-28.el7_5.1.x86_64</p><p>安装命令</p><p>yum install libstdc++.so.6</p><p>步骤8：重新执行安装服务器端命令</p><p>命令 rpm -ivh  MySQL-server-5.5.49-1.linux2.6.i386.rpm</p><p>ps:在安装的过程中,记得复制这段设置密码的格式文本—用来设置登录密码的</p><p>设置登录密码的格式：/usr/bin/mysqladmin -u root password ‘要设值的密码’</p><p>步骤9：安装客户端(MySQL-client-5.5.49-1.linux2.6.i386.rpm)</p><p>命令 rpm -ivh MySQL-client-5.5.49-1.linux2.6.i386.rpm</p><p>ps：会缺依赖,安装mysql客户端端也需要依赖如下软件</p><p>libncurses.so.5</p><p>执行安装依赖命令:yum install libncurses.so.5</p><p>再次执行：rpm -ivh MySQL-client-5.5.49-1.linux2.6.i386.rpm</p><p>步骤10：启动mysql</p><p>命令 service mysql start</p><p>步骤11：将mysql设置开机自动启动服务</p><p>命令 systemctl enable mysql</p><p>步骤12: 设置密码操作</p><p>/usr/bin/mysqladmin -u root password ‘密码’</p><p>步骤13：登录mysql</p><p>命令 mysql -u用户名 -p密码</p><p>步骤14：修改防火墙的配置文件(放行3306端口号)</p><p>命令 vi /etc/sysconfig/iptables</p><p>复制(yy)    </p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</p><p>粘贴(p)</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 3306 -j ACCEPT</p><p>重启防火墙服务:service iptables restart    </p><p>步骤15: 允许远程连接linux下的mysql</p><p>默认情况下mysql为安全起见,不支持远程登录mysql,所以需要设置开启远程登录mysql的权限登录mysql</p><p>权限设置命令：grant all privileges on <em>.</em> to ‘用户名‘@’%’ identified by ‘密码’;</p><p>刷新权限命令：flush privileges;</p><h5 id="linux下安装的mysql中文乱码解决问题："><a href="#linux下安装的mysql中文乱码解决问题：" class="headerlink" title="linux下安装的mysql中文乱码解决问题："></a>linux下安装的mysql中文乱码解决问题：</h5><p>查看服务器的编码：show variables like ‘%char%’; 字符集编码为latin1 不是utf-8</p><p>解决：</p><p>步骤1：停止mysql服务器</p><p>步骤2：将/usr/share/mysql/my-medium.cnf 复制到/ect目录下,且重命名为my.cnf</p><p>步骤3：编辑my.cnf,在[mysqld]下添加一行”character-set-server=utf8” 保存退出</p><p>步骤4：重启mysql服务器 新建数据库查看编码</p><p>四 redis安装</p><p>步骤1: yum install gcc-c++  //因为是C语言编写的,需要C语言的环境(下载过就不需要了)</p><p>步骤2: 将redis压缩包放入/usr/local/redis目录下</p><p>命令 mv redis-3.0.7.tar.gz /usr/local/redis</p><p>步骤3：进入/usr/local/redis目录下,解压redis</p><p>命令 cd /usr/local/redis        </p><p>​     tar -zxvf redis-3.0.7.tar.gz    </p><p>步骤4: 进入解压文件编译并安装redis</p><p>命令 cd redis-3.0.7</p><p>​     make</p><p>​     make PREFIX=/usr/local/redis install</p><p>安装成功之后 在redis目录下多出来一个bin目录</p><p>步骤5：启动(服务器)</p><p>将redis-3.0.7目录下的redis.conf文件复制到 /usr/local/redis/bin 下</p><p>命令 cp redis.conf ../usr/local/redis/bin/        </p><p>修改redis.conf配置文件 设置为启动服务加载配置文件</p><p>命令 vi redis.conf</p><p>搜索/daemonize</p><p>将 daemonize 值改成yes即可</p><p>启动: ./redis-server redis.conf     </p><p>步骤6：使用redis的客户端连接redis服务器            </p><p>连接指定主机 指定端口号            </p><p>命令 ./redis-cli -h ip -p 端口     </p><p>步骤7：如果要使用可视化图形工具连接 要修改防火墙的配置文件</p><p>命令 vi /etc/sysconfig/iptables</p><p>复制(yy)    </p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT</p><p>粘贴(p)</p><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT</p><p>步骤7:重启防火墙服务                    </p><p>service iptables restart</p><p>步骤8:关闭服务器</p><p>./redis-cli -h ip -p 端口 shutdown或kill -9 pid    </p><p>配置Nginx的反向代理</p><p>步骤一：修改nginx的配置文件</p><p>命令 vim nginx.conf</p><p>步骤二：增加或修改如下内容</p><p>server上增加代理</p><p>upstream tomcat{server localhost:8080;} #为谁代理服务</p><p>server {</p><p>　　　　listen 80;</p><p>　　　　server_name localhost;</p><p>　　　　location / {</p><p>​          # root   html;</p><p>​          # index  index.html index.htm;</p><p>​         </p><p>​          proxy_pass <a href="http://tomcat%3B/" target="_blank" rel="noopener">http://tomcat;</a> # 访问tomcat</p><p>​       }</p><p>}</p><p>步骤三：重启nginx</p><p>命令 ./nginx -s reload</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术(cookie&amp;session)</title>
      <link href="/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-cookie-session/"/>
      <url>/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-cookie-session/</url>
      
        <content type="html"><![CDATA[<center>会话技术(cookie&amp;session)</center><h3 id="1-什么是会话技术？"><a href="#1-什么是会话技术？" class="headerlink" title="1 什么是会话技术？"></a>1 什么是会话技术？</h3><p>会话：当打开一个浏览器的时候，意味会话开始了</p><p>​      浏览器可以和服务器进行N多次的信息交互</p><p>​      当关闭浏览器的时候，意味着会话结束了</p><h3 id="2-会话技术的作用？"><a href="#2-会话技术的作用？" class="headerlink" title="2 会话技术的作用？"></a>2 会话技术的作用？</h3><p>作用：用来存储浏览器和服务器在会话交互过程中产生的N多数据(cookie session)</p><h3 id="3-会话技术的分类？"><a href="#3-会话技术的分类？" class="headerlink" title="3 会话技术的分类？"></a>3 会话技术的分类？</h3><p>客户端会话技术(cookie)：会将存储的数据保存在cookie中，整个cookie在浏览器端</p><p>服务器端会话技术(session)：会将存储的数据保存在session中,整个session在服务器上</p><h3 id="4-为什么要将数据存入到cookie或者session中"><a href="#4-为什么要将数据存入到cookie或者session中" class="headerlink" title="4 为什么要将数据存入到cookie或者session中?"></a>4 为什么要将数据存入到cookie或者session中?</h3><p><img src="http://192.168.1.101:8600/ckEditorUploadImg/1577935514660.png" alt="img"></p><h2 id="一-客户端的会话技术-cookie"><a href="#一-客户端的会话技术-cookie" class="headerlink" title="一 客户端的会话技术:cookie"></a>一 客户端的会话技术:cookie</h2><h3 id="1-什么是cookie-cookie有什么作用"><a href="#1-什么是cookie-cookie有什么作用" class="headerlink" title="1 什么是cookie? cookie有什么作用?"></a>1 什么是cookie? cookie有什么作用?</h3><p>cookie: 小纸条 </p><p>作用：存储数据的（浏览器和服务器交互产生的数据）</p><p>特点：cookie是由服务器创建给浏览器保存的</p><h3 id="2-如何使用cookie？"><a href="#2-如何使用cookie？" class="headerlink" title="2 如何使用cookie？"></a>2 如何使用cookie？</h3><p>2.1 服务器如何给客户端写小纸条(cookie)         </p><p>Cookie cookie=new Cookie(String,String);</p><p>2.2 服务器如果把小纸条(cookie)传递给客户端</p><p>response.addCookie(cookie);</p><p>注意：服务器可以给浏览器传递多个cookie,浏览器都会保存 但存在key值覆盖</p><h3 id="3-服务器端如何获取到浏览器传递的cookie信息？"><a href="#3-服务器端如何获取到浏览器传递的cookie信息？" class="headerlink" title="3 服务器端如何获取到浏览器传递的cookie信息？"></a>3 服务器端如何获取到浏览器传递的cookie信息？</h3><p>request.getCookies(); //自动从请求头中获取cookie信息 并且切割并封装成多个cookie对象</p><h3 id="4-cookie的常用API"><a href="#4-cookie的常用API" class="headerlink" title="4 cookie的常用API"></a>4 cookie的常用API</h3><p>getName();   返回值String，返回的是cookie的key</p><p>getValue();  返回值String，返回的是cookie的value</p><h3 id="5-会话级别的cookie和持久化级别的cookie"><a href="#5-会话级别的cookie和持久化级别的cookie" class="headerlink" title="5 会话级别的cookie和持久化级别的cookie"></a>5 会话级别的cookie和持久化级别的cookie</h3><p>不同的浏览器不能共享cookie</p><p>cookie默认是会话级别的                       </p><p>会话级别的cookie：浏览器关闭当前会话默认会把保存的cookie全部销毁  </p><p>持久化级别的cookie：可以让浏览器在一定时间不论开关都会保留cookie</p><p>方法:setMaxAge(秒)</p><p>​           &gt;0: 有效时间</p><p>​           =0：过期(清除)</p><p>特点：设置的时间如果到期了，cookie也会自动销毁</p><h3 id="6-cookie的路径"><a href="#6-cookie的路径" class="headerlink" title="6 cookie的路径"></a>6 cookie的路径</h3><p>  通过设置cookie的路径 设置该cookie在哪些资源下有效</p><p>方法：setPath(“路径”)</p><p> /day10/cs5   只在访问/day10/cs5资源才带</p><p> /day10      访问整个day10项目下的资源都带（这种）</p><p> /                访问整个服务器上的项目资源都带        </p><p> 默认             当前servlet访问路径的上一级</p><p>访问到当前servlet的上一级路径才带</p><p>例如：Servlet: /demo/sd1==访问/web/demo下的资源才携带</p><h3 id="7-cookie的细节："><a href="#7-cookie的细节：" class="headerlink" title="7 cookie的细节："></a>7 cookie的细节：</h3><p>cookie中不能出现特殊符号 例如：空格 分号 逗号  （案例解决）</p><p>cookie存入的数据有大小限制 4kb</p><h2 id="二-服务器端的会话技术-session"><a href="#二-服务器端的会话技术-session" class="headerlink" title="二 服务器端的会话技术:session"></a>二 服务器端的会话技术:session</h2><h3 id="1-Session是什么？作用？"><a href="#1-Session是什么？作用？" class="headerlink" title="1  Session是什么？作用？"></a>1  Session是什么？作用？</h3><p>session是保存在服务器端的会话技术</p><p>作用：也是为了保存会话中产生的数据</p><p>特点  Session是一个域对象  也可以做多个servlet之间的数据传递和共享</p><p>方法：XXXAttribute()</p><p>获取：request.getSession()</p><p>作用范围：数据只在当前的会话中才有效</p><p>  因为当前会话中不论访问多少个servlet获取的都是同一个session</p><h3 id="2-session的剖析"><a href="#2-session的剖析" class="headerlink" title="2  session的剖析"></a>2  session的剖析</h3><p>  2.1 如何保证在一次会话中，保证使用的都是同一个session对象?</p><p>  Cookie:</p><p>​      JSESSIONID=C96896433E2D3CDA169EF754BAD75EAB</p><p>​      JSESSIONID=C96896433E2D3CDA169EF754BAD75EAB  </p><p>  2.2 为什么浏览器关闭以后，使用的就不是同一个对象了？</p><p>​      cookie销毁了 JSESSIONID不存在了</p><h3 id="3-getSession-方法的实现流程"><a href="#3-getSession-方法的实现流程" class="headerlink" title="3  getSession()方法的实现流程"></a>3  getSession()方法的实现流程</h3><p>调用getSession方法时，首先判断cookie中是否有jsessionid。</p><p>如果不存在jsessionid，那么直接创建一个新的session对象返回给你，</p><p>并且向响应头中写一个新的jsessionid存放cookie给浏览器。</p><p>如果存在jsessionid,从服务器内存中去获取对应的session对象。</p><p>（浏览器关闭）再次判断cookie中是否有jsessionid，如果没有，那么直接创建一个新的session对象返回给你，并且向响应头中写一个新的jsessionid存放cookie给浏览器。</p><h3 id="4-实现关闭浏览器继续可以访问到session数据"><a href="#4-实现关闭浏览器继续可以访问到session数据" class="headerlink" title="4  实现关闭浏览器继续可以访问到session数据"></a>4  实现关闭浏览器继续可以访问到session数据</h3><p>   方法：session.getId() 获取session的jsessionid</p><p>获取当前session的jsessionid写回给浏览器</p><h3 id="5-session和cookie的区别？"><a href="#5-session和cookie的区别？" class="headerlink" title="5  session和cookie的区别？"></a>5  session和cookie的区别？</h3><p>   session:服务器端的会话技术 数据都在服务器</p><p>   cookie:客户端的会话技术 数据都在浏览器</p><p>   session:存储的内容没有大小限制</p><p>   cookie：只能存储4kb的内容</p><p>   session：存储的数据安全</p><p>   cookie:  存储的数据不安全</p><p>技术分析：初始jsp</p><p>jsp：能写java代码的html页面  组成：html代码+jsp代码+java代码</p><p>脚本：&lt;% %&gt; java程序片段  &lt;%= %&gt; 程序的页面输出  </p><p>作用：接受servlet产生的数据做显示</p><p>8 域对象的总结 创建 销毁 数据作用范围</p><p>Request</p><p>创建：请求一次 创建一次</p><p>销毁：响应回去即销毁</p><p>作用范围：数据只在一次请求多次转发下才能共享</p><p>ServletContext</p><p>创建：服务器启动创建 且只有一个</p><p>销毁：服务器关闭销毁</p><p>作用范围：在当前项目下数据都能共享</p><p>Session</p><p>创建：java认为当浏览器第一次访问到request.getSession方法的时候 创建session对象</p><p>销毁：</p><p> 1 主动销毁  invalidate()</p><p> 2 被动销毁  默认30分钟不使用自动销毁 </p><p> 3 服务器非正常关闭 （服务器正常关闭session不销毁）</p><p>作用范围：数据在一次会话中有效</p><p>  在一次会话中的多个servlet中获取的session都是同一个</p><p>只要多个servlet/jsp之间做数据传递和共享了，都要想到以上域对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cooike,session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper和Dubbo的对比</title>
      <link href="/ZooKeeper%E5%92%8CDubbo%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
      <url>/ZooKeeper%E5%92%8CDubbo%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>ZooKeeper是一个协调分发的软件<span class="token punctuation">,</span>Dubbo是一个微服务处理的框架<span class="token punctuation">.</span><span class="token punctuation">{</span>ZooKeeper的安装必须是建立在当前的CentOs中具有Java环境的<span class="token punctuation">.</span>    创建Data目录 <span class="token operator">-</span><span class="token operator">></span> 是在ZooKeeper的解压文件夹下创建的 <span class="token operator">-</span><span class="token operator">></span> 去修改conf文件夹下的zoo_simple<span class="token punctuation">.</span>cfg文件<span class="token punctuation">,</span>改名为zoo<span class="token punctuation">.</span>cfg <span class="token operator">-</span><span class="token operator">></span> vim zoo<span class="token punctuation">.</span>cfg修改里面的dataDir<span class="token punctuation">.</span>    进入到bin目录中使用 <span class="token punctuation">.</span>/zkServer<span class="token punctuation">.</span>sh start启动<span class="token punctuation">,</span> <span class="token punctuation">.</span>/zkServer<span class="token punctuation">.</span>sh status <span class="token operator">-</span><span class="token operator">></span> 启动成功的话 就显示 standalone<span class="token punctuation">,</span>如果启动不成功<span class="token punctuation">,</span>显示Probably not running<span class="token punctuation">,</span>如果你已经start<span class="token punctuation">,</span>但是显示可能未启动<span class="token punctuation">,</span>那么就去删除<span class="token punctuation">,</span>data目录下的一个叫XXX<span class="token punctuation">.</span>pid文件<span class="token punctuation">.</span><span class="token punctuation">}</span>默认端口号<span class="token operator">:</span><span class="token number">2181</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>Dubbo<span class="token operator">-</span><span class="token operator">></span>首先解压tomcat<span class="token punctuation">,</span>然后将dubbo<span class="token operator">-</span>admin<span class="token punctuation">.</span>war放到tomcat的webapp文件夹下<span class="token punctuation">,</span>然后去bin文件夹下<span class="token punctuation">,</span> <span class="token punctuation">.</span>/startup<span class="token punctuation">.</span>sh查看tomcat控制台输出的命令 在tomcat的文件夹下 使用 tail <span class="token operator">-</span>f logs<span class="token operator">/</span>cataling<span class="token punctuation">.</span>out老师给你们的Linux它是<span class="token number">6.5</span><span class="token punctuation">,</span>而且是可视化界面<span class="token punctuation">,</span>而且据说还是<span class="token number">32</span>位的<span class="token punctuation">.</span>    自己去建一个CentOs7 <span class="token operator">-</span><span class="token operator">></span> systemctl stop firewall<span class="token punctuation">.</span>service <span class="token punctuation">[</span>关闭防火墙<span class="token punctuation">]</span> systemctl disable firewall<span class="token punctuation">.</span>service<span class="token punctuation">[</span>永久关闭<span class="token punctuation">,</span>以后开机就不启动这个防火墙<span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span>dubbo在ApplicationContext中的配置标签<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.1</span> 配置暴露服务的端口号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>protocol name<span class="token operator">=</span><span class="token string">"dubbo"</span> port<span class="token operator">=</span><span class="token string">"20881"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.2</span> 配置应用名称<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>application name<span class="token operator">=</span><span class="token string">"pyg-sellergoods-service"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.3</span> 配置ZooKeeper协调分发服务<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>registry address<span class="token operator">=</span><span class="token string">"zookeeper://192.168.25.128:2181"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.4</span> 扫描包结构<span class="token punctuation">,</span>完成服务注册<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>annotation <span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.itheima.pyg.sellergoods.service.impl"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">-</span><span class="token operator">></span> 前提<span class="token operator">:</span><span class="token annotation punctuation">@Service</span> <span class="token punctuation">[</span>这个Service是Spring提供给我们还是Dubbo提供给我们的<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.5</span> 配置超时时间<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>provider timeout<span class="token operator">=</span><span class="token string">"50000"</span><span class="token operator">/</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">.</span>@Reference注解<span class="token punctuation">,</span>调用已经注入到Dubbo中的服务<span class="token punctuation">.</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE的基础语法</title>
      <link href="/VUE%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/VUE%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="双向数据绑定demo"><a href="#双向数据绑定demo" class="headerlink" title="双向数据绑定demo"></a>双向数据绑定demo</h6><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8" /&gt;    &lt;title&gt;vue基础笔记&lt;/title&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="my"&gt;  &lt;!-- &lt;input type="text" v-model="msg"/&gt; --&gt;   &lt;!-- &lt;ul&gt;        &lt;li v-for="(v,i) in arr"&gt;{{v}}==={{i}}&lt;/li&gt;   &lt;/ul&gt; --&gt;   &lt;!-- &lt;button type="" v-on:click="action"&gt;click&lt;/button&gt; --&gt;   &lt;!-- &lt;button type="" v-show="flag"&gt;show&lt;/button&gt; --&gt;   &lt;input type="text" :disabled="value=='a'" v-model="value"/&gt;  &lt;!--input输入a禁用--&gt;   &lt;input type="checkbox" v-model="flag"&gt;{{flag}}  &lt;!--复选框--&gt;   &lt;input type="checkbox" v-model="flagN" value="a"&gt;a   &lt;input type="checkbox" v-model="flagN" value="b"&gt;b   &lt;input type="checkbox" v-model="flagN" value="c"&gt;c   &lt;span&gt;{{flagN}}&lt;/span&gt;   &lt;!--单选框--&gt;    &lt;div&gt;        &lt;input type="radio" name="test" v-model="radioA" value="1"&gt;男         &lt;input type="radio" name="test" v-model="radioA" value="2"&gt;女         &lt;span&gt;{{radioA}}&lt;/span&gt;    &lt;/div&gt;    &lt;!--下拉框--&gt;    &lt;div&gt;        &lt;select v-model="selt"&gt;            &lt;option v-for="item in items" :value="item.value"&gt;{{item.text}}&lt;/option&gt;        &lt;/select&gt;        &lt;span&gt;{{selt}}&lt;/span&gt;    &lt;/div&gt;    &lt;!--修饰符--&gt;    &lt;div&gt;        &lt;input type="text" v-model.trim="msg"/&gt;        &lt;input type="number" v-model.number="num"/&gt;    &lt;/div&gt;&lt;/div&gt;    &lt;script&gt;       window.onload = function(){         new Vue({            el:'#my',       //2.0不允许挂载到html上，body元素上。            data:{                msg:'hello vue',                name:'yuze',                age:22,                flag:true,                arr:['a','b','c'],                flagN:[],                radioA:"1",                obj:{id:1,name:'aaa'},                obj2:[{name:'a1',age:10},{name:'a2',age:30}],                items:[{text:'laoshi',value:'1'},{text:'fsadfa',value:'2'},{text:'fas',value:'3'}],                selt:'2'            },            methods:{            }         });       }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

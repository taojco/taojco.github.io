<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>会话技术(cookie&amp;session)</title>
      <link href="/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-cookie-session/"/>
      <url>/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-cookie-session/</url>
      
        <content type="html"><![CDATA[<center>会话技术(cookie&amp;session)</center><h3 id="1-什么是会话技术？"><a href="#1-什么是会话技术？" class="headerlink" title="1 什么是会话技术？"></a>1 什么是会话技术？</h3><p>会话：当打开一个浏览器的时候，意味会话开始了</p><p>​      浏览器可以和服务器进行N多次的信息交互</p><p>​      当关闭浏览器的时候，意味着会话结束了</p><h3 id="2-会话技术的作用？"><a href="#2-会话技术的作用？" class="headerlink" title="2 会话技术的作用？"></a>2 会话技术的作用？</h3><p>作用：用来存储浏览器和服务器在会话交互过程中产生的N多数据(cookie session)</p><h3 id="3-会话技术的分类？"><a href="#3-会话技术的分类？" class="headerlink" title="3 会话技术的分类？"></a>3 会话技术的分类？</h3><p>客户端会话技术(cookie)：会将存储的数据保存在cookie中，整个cookie在浏览器端</p><p>服务器端会话技术(session)：会将存储的数据保存在session中,整个session在服务器上</p><h3 id="4-为什么要将数据存入到cookie或者session中"><a href="#4-为什么要将数据存入到cookie或者session中" class="headerlink" title="4 为什么要将数据存入到cookie或者session中?"></a>4 为什么要将数据存入到cookie或者session中?</h3><p><img src="http://192.168.1.101:8600/ckEditorUploadImg/1577935514660.png" alt="img"></p><h2 id="一-客户端的会话技术-cookie"><a href="#一-客户端的会话技术-cookie" class="headerlink" title="一 客户端的会话技术:cookie"></a>一 客户端的会话技术:cookie</h2><h3 id="1-什么是cookie-cookie有什么作用"><a href="#1-什么是cookie-cookie有什么作用" class="headerlink" title="1 什么是cookie? cookie有什么作用?"></a>1 什么是cookie? cookie有什么作用?</h3><p>cookie: 小纸条 </p><p>作用：存储数据的（浏览器和服务器交互产生的数据）</p><p>特点：cookie是由服务器创建给浏览器保存的</p><h3 id="2-如何使用cookie？"><a href="#2-如何使用cookie？" class="headerlink" title="2 如何使用cookie？"></a>2 如何使用cookie？</h3><p>2.1 服务器如何给客户端写小纸条(cookie)         </p><p>Cookie cookie=new Cookie(String,String);</p><p>2.2 服务器如果把小纸条(cookie)传递给客户端</p><p>response.addCookie(cookie);</p><p>注意：服务器可以给浏览器传递多个cookie,浏览器都会保存 但存在key值覆盖</p><h3 id="3-服务器端如何获取到浏览器传递的cookie信息？"><a href="#3-服务器端如何获取到浏览器传递的cookie信息？" class="headerlink" title="3 服务器端如何获取到浏览器传递的cookie信息？"></a>3 服务器端如何获取到浏览器传递的cookie信息？</h3><p>request.getCookies(); //自动从请求头中获取cookie信息 并且切割并封装成多个cookie对象</p><h3 id="4-cookie的常用API"><a href="#4-cookie的常用API" class="headerlink" title="4 cookie的常用API"></a>4 cookie的常用API</h3><p>getName();   返回值String，返回的是cookie的key</p><p>getValue();  返回值String，返回的是cookie的value</p><h3 id="5-会话级别的cookie和持久化级别的cookie"><a href="#5-会话级别的cookie和持久化级别的cookie" class="headerlink" title="5 会话级别的cookie和持久化级别的cookie"></a>5 会话级别的cookie和持久化级别的cookie</h3><p>不同的浏览器不能共享cookie</p><p>cookie默认是会话级别的                       </p><p>会话级别的cookie：浏览器关闭当前会话默认会把保存的cookie全部销毁  </p><p>持久化级别的cookie：可以让浏览器在一定时间不论开关都会保留cookie</p><p>方法:setMaxAge(秒)</p><p>​           &gt;0: 有效时间</p><p>​           =0：过期(清除)</p><p>特点：设置的时间如果到期了，cookie也会自动销毁</p><h3 id="6-cookie的路径"><a href="#6-cookie的路径" class="headerlink" title="6 cookie的路径"></a>6 cookie的路径</h3><p>  通过设置cookie的路径 设置该cookie在哪些资源下有效</p><p>方法：setPath(“路径”)</p><p> /day10/cs5   只在访问/day10/cs5资源才带</p><p> /day10      访问整个day10项目下的资源都带（这种）</p><p> /                访问整个服务器上的项目资源都带        </p><p> 默认             当前servlet访问路径的上一级</p><p>访问到当前servlet的上一级路径才带</p><p>例如：Servlet: /demo/sd1==访问/web/demo下的资源才携带</p><h3 id="7-cookie的细节："><a href="#7-cookie的细节：" class="headerlink" title="7 cookie的细节："></a>7 cookie的细节：</h3><p>cookie中不能出现特殊符号 例如：空格 分号 逗号  （案例解决）</p><p>cookie存入的数据有大小限制 4kb</p><h2 id="二-服务器端的会话技术-session"><a href="#二-服务器端的会话技术-session" class="headerlink" title="二 服务器端的会话技术:session"></a>二 服务器端的会话技术:session</h2><h3 id="1-Session是什么？作用？"><a href="#1-Session是什么？作用？" class="headerlink" title="1  Session是什么？作用？"></a>1  Session是什么？作用？</h3><p>session是保存在服务器端的会话技术</p><p>作用：也是为了保存会话中产生的数据</p><p>特点  Session是一个域对象  也可以做多个servlet之间的数据传递和共享</p><p>方法：XXXAttribute()</p><p>获取：request.getSession()</p><p>作用范围：数据只在当前的会话中才有效</p><p>  因为当前会话中不论访问多少个servlet获取的都是同一个session</p><h3 id="2-session的剖析"><a href="#2-session的剖析" class="headerlink" title="2  session的剖析"></a>2  session的剖析</h3><p>  2.1 如何保证在一次会话中，保证使用的都是同一个session对象?</p><p>  Cookie:</p><p>​      JSESSIONID=C96896433E2D3CDA169EF754BAD75EAB</p><p>​      JSESSIONID=C96896433E2D3CDA169EF754BAD75EAB  </p><p>  2.2 为什么浏览器关闭以后，使用的就不是同一个对象了？</p><p>​      cookie销毁了 JSESSIONID不存在了</p><h3 id="3-getSession-方法的实现流程"><a href="#3-getSession-方法的实现流程" class="headerlink" title="3  getSession()方法的实现流程"></a>3  getSession()方法的实现流程</h3><p>调用getSession方法时，首先判断cookie中是否有jsessionid。</p><p>如果不存在jsessionid，那么直接创建一个新的session对象返回给你，</p><p>并且向响应头中写一个新的jsessionid存放cookie给浏览器。</p><p>如果存在jsessionid,从服务器内存中去获取对应的session对象。</p><p>（浏览器关闭）再次判断cookie中是否有jsessionid，如果没有，那么直接创建一个新的session对象返回给你，并且向响应头中写一个新的jsessionid存放cookie给浏览器。</p><h3 id="4-实现关闭浏览器继续可以访问到session数据"><a href="#4-实现关闭浏览器继续可以访问到session数据" class="headerlink" title="4  实现关闭浏览器继续可以访问到session数据"></a>4  实现关闭浏览器继续可以访问到session数据</h3><p>   方法：session.getId() 获取session的jsessionid</p><p>获取当前session的jsessionid写回给浏览器</p><h3 id="5-session和cookie的区别？"><a href="#5-session和cookie的区别？" class="headerlink" title="5  session和cookie的区别？"></a>5  session和cookie的区别？</h3><p>   session:服务器端的会话技术 数据都在服务器</p><p>   cookie:客户端的会话技术 数据都在浏览器</p><p>   session:存储的内容没有大小限制</p><p>   cookie：只能存储4kb的内容</p><p>   session：存储的数据安全</p><p>   cookie:  存储的数据不安全</p><p>技术分析：初始jsp</p><p>jsp：能写java代码的html页面  组成：html代码+jsp代码+java代码</p><p>脚本：&lt;% %&gt; java程序片段  &lt;%= %&gt; 程序的页面输出  </p><p>作用：接受servlet产生的数据做显示</p><p>8 域对象的总结 创建 销毁 数据作用范围</p><p>Request</p><p>创建：请求一次 创建一次</p><p>销毁：响应回去即销毁</p><p>作用范围：数据只在一次请求多次转发下才能共享</p><p>ServletContext</p><p>创建：服务器启动创建 且只有一个</p><p>销毁：服务器关闭销毁</p><p>作用范围：在当前项目下数据都能共享</p><p>Session</p><p>创建：java认为当浏览器第一次访问到request.getSession方法的时候 创建session对象</p><p>销毁：</p><p> 1 主动销毁  invalidate()</p><p> 2 被动销毁  默认30分钟不使用自动销毁 </p><p> 3 服务器非正常关闭 （服务器正常关闭session不销毁）</p><p>作用范围：数据在一次会话中有效</p><p>  在一次会话中的多个servlet中获取的session都是同一个</p><p>只要多个servlet/jsp之间做数据传递和共享了，都要想到以上域对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cooike,session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper和Dubbo的对比</title>
      <link href="/ZooKeeper%E5%92%8CDubbo%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
      <url>/ZooKeeper%E5%92%8CDubbo%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>ZooKeeper是一个协调分发的软件<span class="token punctuation">,</span>Dubbo是一个微服务处理的框架<span class="token punctuation">.</span><span class="token punctuation">{</span>ZooKeeper的安装必须是建立在当前的CentOs中具有Java环境的<span class="token punctuation">.</span>    创建Data目录 <span class="token operator">-</span><span class="token operator">></span> 是在ZooKeeper的解压文件夹下创建的 <span class="token operator">-</span><span class="token operator">></span> 去修改conf文件夹下的zoo_simple<span class="token punctuation">.</span>cfg文件<span class="token punctuation">,</span>改名为zoo<span class="token punctuation">.</span>cfg <span class="token operator">-</span><span class="token operator">></span> vim zoo<span class="token punctuation">.</span>cfg修改里面的dataDir<span class="token punctuation">.</span>    进入到bin目录中使用 <span class="token punctuation">.</span>/zkServer<span class="token punctuation">.</span>sh start启动<span class="token punctuation">,</span> <span class="token punctuation">.</span>/zkServer<span class="token punctuation">.</span>sh status <span class="token operator">-</span><span class="token operator">></span> 启动成功的话 就显示 standalone<span class="token punctuation">,</span>如果启动不成功<span class="token punctuation">,</span>显示Probably not running<span class="token punctuation">,</span>如果你已经start<span class="token punctuation">,</span>但是显示可能未启动<span class="token punctuation">,</span>那么就去删除<span class="token punctuation">,</span>data目录下的一个叫XXX<span class="token punctuation">.</span>pid文件<span class="token punctuation">.</span><span class="token punctuation">}</span>默认端口号<span class="token operator">:</span><span class="token number">2181</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span>Dubbo<span class="token operator">-</span><span class="token operator">></span>首先解压tomcat<span class="token punctuation">,</span>然后将dubbo<span class="token operator">-</span>admin<span class="token punctuation">.</span>war放到tomcat的webapp文件夹下<span class="token punctuation">,</span>然后去bin文件夹下<span class="token punctuation">,</span> <span class="token punctuation">.</span>/startup<span class="token punctuation">.</span>sh查看tomcat控制台输出的命令 在tomcat的文件夹下 使用 tail <span class="token operator">-</span>f logs<span class="token operator">/</span>cataling<span class="token punctuation">.</span>out老师给你们的Linux它是<span class="token number">6.5</span><span class="token punctuation">,</span>而且是可视化界面<span class="token punctuation">,</span>而且据说还是<span class="token number">32</span>位的<span class="token punctuation">.</span>    自己去建一个CentOs7 <span class="token operator">-</span><span class="token operator">></span> systemctl stop firewall<span class="token punctuation">.</span>service <span class="token punctuation">[</span>关闭防火墙<span class="token punctuation">]</span> systemctl disable firewall<span class="token punctuation">.</span>service<span class="token punctuation">[</span>永久关闭<span class="token punctuation">,</span>以后开机就不启动这个防火墙<span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span>dubbo在ApplicationContext中的配置标签<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.1</span> 配置暴露服务的端口号<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>protocol name<span class="token operator">=</span><span class="token string">"dubbo"</span> port<span class="token operator">=</span><span class="token string">"20881"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.2</span> 配置应用名称<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>application name<span class="token operator">=</span><span class="token string">"pyg-sellergoods-service"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.3</span> 配置ZooKeeper协调分发服务<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>registry address<span class="token operator">=</span><span class="token string">"zookeeper://192.168.25.128:2181"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.4</span> 扫描包结构<span class="token punctuation">,</span>完成服务注册<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>annotation <span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.itheima.pyg.sellergoods.service.impl"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">-</span><span class="token operator">></span> 前提<span class="token operator">:</span><span class="token annotation punctuation">@Service</span> <span class="token punctuation">[</span>这个Service是Spring提供给我们还是Dubbo提供给我们的<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.5</span> 配置超时时间<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dubbo<span class="token operator">:</span>provider timeout<span class="token operator">=</span><span class="token string">"50000"</span><span class="token operator">/</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">.</span>@Reference注解<span class="token punctuation">,</span>调用已经注入到Dubbo中的服务<span class="token punctuation">.</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE的基础语法</title>
      <link href="/VUE%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/VUE%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h6 id="双向数据绑定demo"><a href="#双向数据绑定demo" class="headerlink" title="双向数据绑定demo"></a>双向数据绑定demo</h6><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8" /&gt;    &lt;title&gt;vue基础笔记&lt;/title&gt;  &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="my"&gt;  &lt;!-- &lt;input type="text" v-model="msg"/&gt; --&gt;   &lt;!-- &lt;ul&gt;        &lt;li v-for="(v,i) in arr"&gt;{{v}}==={{i}}&lt;/li&gt;   &lt;/ul&gt; --&gt;   &lt;!-- &lt;button type="" v-on:click="action"&gt;click&lt;/button&gt; --&gt;   &lt;!-- &lt;button type="" v-show="flag"&gt;show&lt;/button&gt; --&gt;   &lt;input type="text" :disabled="value=='a'" v-model="value"/&gt;  &lt;!--input输入a禁用--&gt;   &lt;input type="checkbox" v-model="flag"&gt;{{flag}}  &lt;!--复选框--&gt;   &lt;input type="checkbox" v-model="flagN" value="a"&gt;a   &lt;input type="checkbox" v-model="flagN" value="b"&gt;b   &lt;input type="checkbox" v-model="flagN" value="c"&gt;c   &lt;span&gt;{{flagN}}&lt;/span&gt;   &lt;!--单选框--&gt;    &lt;div&gt;        &lt;input type="radio" name="test" v-model="radioA" value="1"&gt;男         &lt;input type="radio" name="test" v-model="radioA" value="2"&gt;女         &lt;span&gt;{{radioA}}&lt;/span&gt;    &lt;/div&gt;    &lt;!--下拉框--&gt;    &lt;div&gt;        &lt;select v-model="selt"&gt;            &lt;option v-for="item in items" :value="item.value"&gt;{{item.text}}&lt;/option&gt;        &lt;/select&gt;        &lt;span&gt;{{selt}}&lt;/span&gt;    &lt;/div&gt;    &lt;!--修饰符--&gt;    &lt;div&gt;        &lt;input type="text" v-model.trim="msg"/&gt;        &lt;input type="number" v-model.number="num"/&gt;    &lt;/div&gt;&lt;/div&gt;    &lt;script&gt;       window.onload = function(){         new Vue({            el:'#my',       //2.0不允许挂载到html上，body元素上。            data:{                msg:'hello vue',                name:'yuze',                age:22,                flag:true,                arr:['a','b','c'],                flagN:[],                radioA:"1",                obj:{id:1,name:'aaa'},                obj2:[{name:'a1',age:10},{name:'a2',age:30}],                items:[{text:'laoshi',value:'1'},{text:'fsadfa',value:'2'},{text:'fas',value:'3'}],                selt:'2'            },            methods:{            }         });       }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
